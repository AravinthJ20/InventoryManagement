<div class="sidebar-popup" id="workflowSidebar">
  <div class="sidebar-header">
    <h3 id="sidebar-title">Workflow</h3>
    <button class="close-sidebar" onclick="closeWorkflowSidebar()">&times;</button>
  </div>

  <div class="sidebar-tabs">
    <button onclick="switchTab('workflow')" id="tab-workflow" class="active">Workflow</button>
    <button onclick="switchTab('messages')" id="tab-messages">Messages</button>
    <button onclick="switchTab('notes')" id="tab-notes">Notes</button>
  </div>

  <div class="sidebar-content">
    <div id="tab-content-workflow" class="tab-content active">
      <!-- Workflow UI -->
      <p>Current approver:</p>
      <input type="text" id="approver" readonly />
      <p>Workflow ID:</p>
      <input type="text" id="workflowId" readonly />
      <p>Product ID:</p>
      <input type="text" id="productId" readonly />
      <input type="text" id="role" hidden />

      <div id="actions"></div>
      <div class="logs-container"></div>
    </div>

   <div id="tab-content-messages" class="tab-content">
  <div id="messages-content" class="chat-window">
    <!-- Messages will go here -->
  </div>
  <div class="chat-input-area">
    <input type="text" id="messageInput" placeholder="Type a message..." />
    <button onclick="sendMessage()">Send</button>
  </div>
</div>

<div id="tab-content-notes" class="tab-content">
  <div id="notes-content" class="chat-window">
    <!-- Notes will go here -->
  </div>
  <div class="chat-input-area">
    <input type="text" id="noteInput" placeholder="Add a note..." />
    <button onclick="sendNote()">Add</button>
  </div>
</div>

  </div>
</div>
<style>
    .chat-window {
  max-height: 400px;
  overflow-y: auto;
  padding: 10px;
  display: flex;
  flex-direction: column;
  gap: 10px;
  background: #f0f0f0;
  border-radius: 6px;
  margin-bottom: 10px;
}

.chat-bubble {
  padding: 10px 15px;
  border-radius: 20px;
  max-width: 70%;
  word-wrap: break-word;
  font-size: 14px;
  position: relative;
}

.chat-bubble.user {
  background-color: #007bff;
  color: white;
  align-self: flex-end;
}

.chat-bubble.admin {
  background-color: #e0e0e0;
  color: #333;
  align-self: flex-start;
}

.chat-bubble .timestamp {
  font-size: 10px;
  color: #888;
  margin-top: 5px;
  display: block;
  text-align: right;
}

.chat-input-area {
  display: flex;
  gap: 10px;
}

.chat-input-area input[type="text"] {
  flex: 1;
  padding: 8px;
  border-radius: 20px;
  border: 1px solid #ccc;
}

.chat-input-area button {
  padding: 8px 14px;
  border-radius: 20px;
  border: none;
  background-color: #007bff;
  color: white;
  font-weight: bold;
  cursor: pointer;
}

</style>
<style>
    .sidebar-popup {
    position: fixed;
    top: 30px;
    right: -420px;
    width: 400px;
    height: 100vh;
    background: #f9f9f9;
    box-shadow: -2px 0 12px rgba(0, 0, 0, 0.15);
    transition: right 0.3s ease;
    z-index: 1000;
    overflow-y: auto;
    border-radius: 8px 0 0 8px;
}

.sidebar-popup.active {
    right: 0;
}

.sidebar-header {
    padding: 20px;
    background: #ffffff;
    border-bottom: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-radius: 8px 0 0 0;
}

.sidebar-header h3 {
    margin: 0;
    font-size: 18px;
    font-weight: bold;
}

.sidebar-content {
    padding: 20px;
}

.sidebar-content p {
    font-weight: bold;
    margin-bottom: 5px;
    color: #333;
    font-size: 14px;
}

.sidebar-content input[type="text"] {
    width: 50%;
    padding: 8px;
    
    margin-bottom: 5px;
    border-radius: 5px;
    border: 1px solid #ccc;
    background: #fff;
    font-size: 14px;
}

#actions {
    margin-top: 10px;
    display: flex;
    gap: 10px;
}

#actions .button {
    padding: 10px 16px;
    border: none;
    border-radius: 5px;
    color: white;
    font-weight: bold;
    cursor: pointer;
    font-size: 14px;
}

#actions .approve {
    background-color: #007bff;
}

#actions .reject {
    background-color: #dc3545;
}

.logs-container {
    margin-top: 20px;
}

.log-card {
    background: #fff;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    margin-bottom: 15px;
}

.log-field {
    margin-bottom: 8px;
    font-size: 14px;
    color: #444;
}

.log-label {
    font-weight: bold;
    margin-right: 5px;
    color: #111;
}

#response {
    margin-top: 10px;
    font-size: 14px;
    color: green;
}

.close-sidebar {
    background: transparent;
    border: none;
    font-size: 24px;
    color: #666;
    cursor: pointer;
    margin-left: auto;
}

</style>
<style>
    .sidebar-tabs {
    display: flex;
    justify-content: space-around;
    background: #eee;
    border-bottom: 1px solid #ccc;
}

.sidebar-tabs button {
    flex: 1;
    padding: 10px;
    background: none;
    border: none;
    cursor: pointer;
    font-weight: bold;
    border-bottom: 3px solid transparent;
    transition: all 0.3s ease;
}

.sidebar-tabs button.active {
    background: #fff;
    border-bottom: 3px solid #007bff;
    color: #007bff;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

</style>
<script>
    function openWorkflowSidebar(id, tab = 'workflow') {
    const sidebar = document.getElementById('workflowSidebar');
    sidebar.classList.add('active');
    switchTab(tab);
    
    if (tab === 'workflow') {
        fetchWorkflowLog(id);
    } else if (tab === 'notes') {
        loadNotes(id);
    } else if (tab === 'messages') {
        loadMessages(id);
    }
}

function switchTab(tab) {
    // Title
    document.getElementById("sidebar-title").innerText = tab.charAt(0).toUpperCase() + tab.slice(1);

    // Toggle tabs
    document.querySelectorAll(".tab-content").forEach(c => c.classList.remove("active"));
    document.querySelectorAll(".sidebar-tabs button").forEach(b => b.classList.remove("active"));

    document.getElementById(`tab-content-${tab}`).classList.add("active");
    document.getElementById(`tab-${tab}`).classList.add("active");
}

function closeWorkflowSidebar() {
    document.getElementById('workflowSidebar').classList.remove('active');
}

async function fetchWorkflowLog(id) {
    try {
        let workflowElement = document.getElementById("workflowId");
        let action = document.getElementById("actions");
        let approver = document.getElementById("approver");
        let productId = document.getElementById("productId");
        
        // Clear previous logs
        document.querySelector('.logs-container').innerHTML = '';
        action.innerHTML = '';

        const response = await fetch(`/log/${id}`);
        if (!response.ok) throw new Error(`Error: ${response.statusText}`);
        
        const data = await response.json();
        const pendingUser = data.pendingUser;
        const user = data.role;

        if (data.workflowId) {
            workflowElement.value = data.workflowId;
        } else {
            workflowElement.value = 'Default Value';
        }

        if (data.pendingUser == null || pendingUser != user) {
            approver.value = data.pendingUser || '';
            productId.value = data.log[0]?.productId || '';
        } else {
            data.decisions.forEach(decision => {
                let button = document.createElement('button');
                button.value = decision;
                button.style.display = 'block';
                button.classList.add('button', decision.toLowerCase());
                button.onclick = () => sendAction(decision);
                button.textContent = decision;
                action.appendChild(button);
            });
            
            approver.value = data.pendingUser || '';
            productId.value = data.log[0]?.productId || '';
        }

        // Display logs
        const logsContainer = document.querySelector('.logs-container');
        data.log.forEach(log => {
            const logCard = document.createElement('div');
            logCard.className = 'log-card';
            logCard.innerHTML = `
                <div class="log-field"><span class="log-label">User Profile:</span> ${log.approver}</div>
                <div class="log-field"><span class="log-label">Status:</span> ${log.status}</div>
            `;
            logsContainer.appendChild(logCard);
        });

    } catch (error) {
        console.error('Error:', error);
    }
}

function sendAction(action) {
    var approver = document.getElementById("approver").value;
    var productId = document.getElementById("productId").value;
    
    const payload = {
        approver: approver,
        workflowId: "dbflow",
        action: action,
        productId: productId
    };

    fetch('/workflow-engine/triggerWorkFlow', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
    })
    .then(response => response.json())
    .then(data => {
        console.log(data);
        // Refresh the workflow log after action
        fetchWorkflowLog(productId);
    })
    .catch(error => {
        console.error('Error:', error);
        document.getElementById('response').innerText = 'An error occurred.';
    });
}




function loadNotes(id) {
  const container = document.getElementById('notes-content');
  container.innerHTML = '<p>Loading notes...</p>';

  fetch(`/notes/${id}`)
    .then(res => res.json())
    .then(data => {
      container.innerHTML = '';
      data.notes.forEach(note => {
        const bubble = document.createElement('div');
        bubble.className = `chat-bubble ${note.by === 'user' ? 'user' : 'admin'}`;
        bubble.innerHTML = `
          ${note.text}
          <span class="timestamp">${note.timestamp}</span>
        `;
        container.appendChild(bubble);
      });
    });
}

function loadMessages(id) {
  const container = document.getElementById('messages-content');
  container.innerHTML = '<p>Loading messages...</p>';

  fetch(`/messages/${id}`)
    .then(res => res.json())
    .then(data => {
      container.innerHTML = '';
      data.messages.forEach(msg => {
        const bubble = document.createElement('div');
        bubble.className = `chat-bubble ${msg.by === 'user' ? 'user' : 'admin'}`;
        bubble.innerHTML = `
          ${msg.text}
          <span class="timestamp">${msg.timestamp}</span>
        `;
        container.appendChild(bubble);
      });
    });
}

function sendNote() {
  const input = document.getElementById('noteInput');
  const text = input.value.trim();
  const id = document.getElementById('workflowId').value;

  if (!text) return;

  fetch(`/notes/${id}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ text })
  })
    .then(res => res.json())
    .then(() => {
      input.value = '';
      loadNotes(id);
    });
}

function sendMessage() {
  const input = document.getElementById('messageInput');
  const text = input.value.trim();
  const id = document.getElementById('workflowId').value;

  if (!text) return;

  fetch(`/messages/${id}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ text })
  })
    .then(res => res.json())
    .then(() => {
      input.value = '';
      loadMessages(id);
    });
}


</script>