<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Sales Order</title>
    <link rel="stylesheet" href="/css/layout.css">
    <link rel="stylesheet" href="/css/popupTable.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script src="../js/utils.js"></script>
    <script src="/js/layout.js"></script>
    <script src="../js/embeddedPopup.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <style>
        /* Base styles from previous implementation */
        .error-message { color: red; font-size: 12px; margin-top: 4px; }
        .invalid { border-color: red; }
        .popup2 { position: fixed; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; z-index: 1000; }
        .popup-overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); }
        .popup-box { position: relative; background: white; padding: 20px; border-radius: 8px; max-width: 400px; text-align: center; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); }
        .popup-box h2 { margin: 0 0 10px; }
        .popup-box p { font-size: 14px; margin: 0 0 20px; }
        .popup-box button { background: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; }
        .popup-box button:hover { background: #0056b3; }
        .table-container input { padding: 5px; }
        
        /* Sales Order Specific Styles */
        .so-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .so-number {
            font-size: 1.2em;
            font-weight: bold;
            color: #2c3e50;
        }
        
        .so-date {
            color: #7f8c8d;
        }
        
        .customer-info {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            border-left: 4px solid #3498db;
        }
        
        .customer-info h4 {
            margin-top: 0;
            color: #2c3e50;
        }
        
        .total-section {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
            text-align: right;
        }
        
        .total-line {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
        }
        
        .total-label {
            font-weight: bold;
            color: #2c3e50;
        }
        
        .total-value {
            min-width: 120px;
            text-align: right;
        }
        
        .grand-total {
            font-size: 1.2em;
            border-top: 1px solid #ddd;
            padding-top: 10px;
            margin-top: 10px;
            font-weight: bold;
            color: #e74c3c;
        }
        
        .amount-in-words {
            font-style: italic;
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px dashed #ddd;
            color: #7f8c8d;
        }
        
        .delivery-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        @media (max-width: 768px) {
            .delivery-info {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>

<body>
    {{> sidebar}}
    {{> topbar user=user}}

    <main class="main-content shifted">
        <div class="sub-container">
            <div class="mini-container formContainter">
                <div class="section-header">
                    <span class="containerInfo">
                        <button class="collapse-btn" onclick="toggleTable(this)">-</button>
                        <h3 class="container-hederText">Sales Order Information</h3>
                    </span>
                </div>
                <span id="1">
                    <form method="POST" id="soForm" class="form" action="/CartAdd">
                        <div class="so-header">
                            <div>
                                <label for="soNumber">SO Number:</label>
                                <input type="text" id="soNumber" name="soNumber" value="SO-{{generateId}}" readonly>
                            </div>
                            <div class="so-date">
                                <label for="soDate">Date:</label>
                                <input type="date" id="soDate" name="soDate" required>
                            </div>
                        </div>
                        
                        <div>
                            <label for="customer">Customer:</label>
                            <select id="customer" name="customer" required onchange="getCustomerDetails(this.value)">
                                <option value="">Select Customer</option>
                                {{#each customers}}
                                <option value="{{this._id}}">{{this.name}} ({{this.code}})</option>
                                {{/each}}
                            </select>
                        </div>
                        
                        <div class="customer-info" id="customerInfo" style="display: none;">
                            <h4>Customer Details</h4>
                            <div id="customerDetails"></div>
                        </div>
                        
                        <div class="delivery-info">
                            <div>
                                <label for="deliveryDate">Delivery Date:</label>
                                <input type="date" id="deliveryDate" name="deliveryDate" required>
                            </div>
                            <div>
                                <label for="deliveryAddress">Delivery Address:</label>
                                <select id="deliveryAddress" name="deliveryAddress">
                                    <option value="">Same as billing address</option>
                                    <option value="warehouse">Warehouse Pickup</option>
                                    <option value="other">Other Address</option>
                                </select>
                            </div>
                        </div>
                        
                        <div>
                            <label for="paymentTerms">Payment Terms:</label>
                            <select id="paymentTerms" name="paymentTerms" required>
                                <option value="Net 15">Net 15</option>
                                <option value="Net 30" selected>Net 30</option>
                                <option value="Net 45">Net 45</option>
                                <option value="COD">Cash on Delivery</option>
                                <option value="Advance">Advance Payment</option>
                            </select>
                        </div>
                        
                        <div>
                            <label for="salesPerson">Sales Person:</label>
                            <select id="salesPerson" name="salesPerson" required>
                                <option value="">Select Sales Person</option>
                                {{#each salesPersons}}
                                <option value="{{this._id}}">{{this.name}}</option>
                                {{/each}}
                            </select>
                        </div>
                        
                        <div>
                            <label for="notes">Notes:</label>
                            <textarea id="notes" name="notes" rows="3" placeholder="Special instructions or comments..."></textarea>
                        </div>
                    </form>
                </span>
            </div>
        </div>

        <div class="sub-container">
            <div class="mini-container list-container">
                <div class="list-header">
                    <span class="secttinInfo">
                        <button class="collapse-btn" onclick="toggleTable(this)">-</button>
                    </span>
                    <h3 class="container-hederText">Order Items</h3>
                    <div>
                        <button id="addRowBtn" onclick="addRow('soItemsTable')">+ Add Item</button>
                        <button class="table-header-btn" onclick="showProductSelector()">Select Products</button>
                        <button class="table-header-btn" onclick="downloadTemplate()">Download Template</button>
                        <input type="file" id="excelUpload" accept=".xls,.xlsx" onchange="uploadExcel(event)" style="display: none;">
                        <label for="excelUpload" class="table-header-btn">Upload Excel</label>
                    </div>
                </div>

                <span id="2">
                    <div id="soItems" class="table-container">
                        <table id="soItemsTable">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Description</th>
                                    <th>Quantity</th>
                                    <th>Unit</th>
                                    <th>Unit Price</th>
                                    <th>Discount %</th>
                                    <th>Tax Rate</th>
                                    <th>Line Total</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Rows will be added dynamically -->
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="total-section">
                        <div class="total-line">
                            <span class="total-label">Subtotal:</span>
                            <span class="total-value" id="subtotal">0.00</span>
                        </div>
                        <div class="total-line">
                            <span class="total-label">Discount:</span>
                            <span class="total-value" id="totalDiscount">0.00</span>
                        </div>
                        <div class="total-line">
                            <span class="total-label">Tax:</span>
                            <span class="total-value" id="totalTax">0.00</span>
                        </div>
                        <div class="total-line">
                            <span class="total-label">Shipping:</span>
                            <span class="total-value"><input type="number" id="shippingFee" name="shippingFee" value="0.00" min="0" step="0.01" onchange="calculateTotals()"></span>
                        </div>
                        <div class="total-line grand-total">
                            <span class="total-label">Total Amount:</span>
                            <span class="total-value" id="grandTotal">0.00</span>
                        </div>
                        <div class="amount-in-words" id="amountInWords">Zero</div>
                    </div>
                </span>
            </div>
        </div>
        
        <div class="sub-container">
            <div class="mini-container formContainter">
                <div class="section-header">
                    <span class="containerInfo">
                        <button class="collapse-btn" onclick="toggleTable(this)">-</button>
                        <h3 class="container-hederText">Additional Information</h3>
                    </span>
                </div>
                <span id="3">
                    <form method="POST" id="additionalInfoForm" class="form" action="/CartAdd">
                        <div>
                            <label for="reference">Reference/PO Number:</label>
                            <input type="text" id="reference" name="reference" placeholder="Customer's PO number if any">
                        </div>
                        
                        <div>
                            <label for="shippingMethod">Shipping Method:</label>
                            <select id="shippingMethod" name="shippingMethod">
                                <option value="">Select Shipping Method</option>
                                <option value="standard">Standard Shipping</option>
                                <option value="express">Express Shipping</option>
                                <option value="pickup">Customer Pickup</option>
                                <option value="drop-ship">Drop Shipment</option>
                            </select>
                        </div>
                        
                        <div>
                            <label for="termsConditions">Terms & Conditions:</label>
                            <textarea id="termsConditions" name="termsConditions" rows="3">1. Prices valid for 30 days
2. Delivery within 5-7 business days
3. Returns accepted within 14 days</textarea>
                        </div>
                        
                        <div class="form-group">
                            <label><input type="checkbox" name="termsAgreement" required> I confirm that all information provided is accurate</label>
                        </div>
                    </form>
                </span>
            </div>
        </div>
        
        <div class="action">
            <button class="form-action-btn" id="submitBtn" onclick="submitSalesOrder()">Create Sales Order</button>
            <button class="form-action-btn" id="saveDraftBtn" onclick="saveAsDraft()">Save as Draft</button>
            <button class="form-action-btn" id="printBtn" onclick="printSalesOrder()">Print Preview</button>
            <button class="form-action-btn" id="clearBtn" onclick="clearForm()">Clear Form</button>
        </div>
    </main>

    <!-- Product Selection Popup -->
    <div class="popuptable" id="productSelectorPopup" style="display: none;">
        <div class="popup-content" style="width: 80%; max-width: 900px;">
            <h3>Select Products</h3>
            <div style="margin-bottom: 15px;">
                <input type="text" id="productSearch" placeholder="Search products..." style="padding: 8px; width: 300px;">
                <button onclick="searchProducts()">Search</button>
            </div>
            <table style="width: 100%;">
                <thead>
                    <tr>
                        <th><input type="checkbox" id="selectAllProducts"></th>
                        <th>Product Code</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Stock</th>
                    </tr>
                </thead>
                <tbody id="productTableBody">
                    <!-- Products will be loaded here -->
                </tbody>
            </table>
            <div style="margin-top: 15px; text-align: right;">
                <button class="btn" onclick="addSelectedProducts()">Add Selected</button>
                <button class="close-popup" onclick="closeProductSelector()">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let selectedCustomer = null;
        let allProducts = [];
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            // Set today's date as default for SO date
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('soDate').value = today;
            
            // Set default delivery date to 3 days from today
            const deliveryDate = new Date();
            deliveryDate.setDate(deliveryDate.getDate() + 3);
            document.getElementById('deliveryDate').value = deliveryDate.toISOString().split('T')[0];
            
            // Load initial data
            loadProducts();
            
            // Initialize form validation
            markRequiredFields();
            tableDataCheck();
            
            // Set up event listeners
            document.getElementById('shippingFee').addEventListener('change', calculateTotals);
        });

        // Function to load products for selection
        function loadProducts() {
            // In a real application, this would fetch from your API
            fetch('/api/products')
                .then(response => response.json())
                .then(data => {
                    allProducts = data;
                    populateProductSelector(data);
                })
                .catch(error => {
                    console.error('Error loading products:', error);
                });
        }
        
        // Function to populate product selector
        function populateProductSelector(products) {
            const tableBody = document.getElementById('productTableBody');
            tableBody.innerHTML = '';
            
            products.forEach(product => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><input type="checkbox" class="product-checkbox" data-id="${product._id}"></td>
                    <td>${product.code}</td>
                    <td>${product.name}</td>
                    <td>${product.description || ''}</td>
                    <td>${product.price.toFixed(2)}</td>
                    <td>${product.stock}</td>
                `;
                tableBody.appendChild(row);
            });
            
            // Set up select all checkbox
            document.getElementById('selectAllProducts').addEventListener('change', function() {
                const checkboxes = document.querySelectorAll('.product-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
            });
        }
        
        // Function to show product selector popup
        function showProductSelector() {
            document.getElementById('productSelectorPopup').style.display = 'flex';
        }
        
        // Function to close product selector
        function closeProductSelector() {
            document.getElementById('productSelectorPopup').style.display = 'none';
        }
        
        // Function to add selected products to order
        function addSelectedProducts() {
            const checkboxes = document.querySelectorAll('.product-checkbox:checked');
            const table = document.getElementById('soItemsTable').getElementsByTagName('tbody')[0];
            
            checkboxes.forEach(checkbox => {
                const productId = checkbox.getAttribute('data-id');
                const product = allProducts.find(p => p._id === productId);
                
                if (product) {
                    const newRow = table.insertRow();
                    newRow.innerHTML = `
                        <td>
                            <input type="hidden" name="productId" value="${product._id}">
                            ${product.code}
                        </td>
                        <td>${product.name}</td>
                        <td><input type="number" name="quantity" min="1" value="1" required onchange="calculateLineTotal(this)"></td>
                        <td>${product.unit || 'EA'}</td>
                        <td><input type="number" name="unitPrice" min="0" step="0.01" value="${product.price.toFixed(2)}" required onchange="calculateLineTotal(this)"></td>
                        <td><input type="number" name="discount" min="0" max="100" value="0" onchange="calculateLineTotal(this)"></td>
                        <td>
                            <select name="taxRate" onchange="calculateLineTotal(this)">
                                <option value="0">0%</option>
                                <option value="5">5%</option>
                                <option value="10" selected>10%</option>
                                <option value="18">18%</option>
                            </select>
                        </td>
                        <td><span name="lineTotal">${product.price.toFixed(2)}</span></td>
                        <td><button class="deleteRowBtn" onclick="deleteRow(this);">-</button></td>
                    `;
                }
            });
            
            closeProductSelector();
            calculateTotals();
            checkTableForEmptyData('soItemsTable');
        }
        
        // Function to get customer details
        function getCustomerDetails(customerId) {
            if (!customerId) {
                document.getElementById('customerInfo').style.display = 'none';
                selectedCustomer = null;
                return;
            }
            
            fetch(`/api/customers/${customerId}`)
                .then(response => response.json())
                .then(data => {
                    selectedCustomer = data;
                    const customerInfo = document.getElementById('customerInfo');
                    const customerDetails = document.getElementById('customerDetails');
                    
                    customerDetails.innerHTML = `
                        <p><strong>Contact:</strong> ${data.contactPerson}</p>
                        <p><strong>Phone:</strong> ${data.phone}</p>
                        <p><strong>Email:</strong> ${data.email}</p>
                        <p><strong>Billing Address:</strong> ${data.address}, ${data.city}, ${data.country}</p>
                        <p><strong>Tax ID:</strong> ${data.taxId || 'N/A'}</p>
                        <p><strong>Credit Limit:</strong> ${data.creditLimit ? '$' + data.creditLimit.toFixed(2) : 'N/A'}</p>
                    `;
                    
                    customerInfo.style.display = 'block';
                    
                    // Update delivery address options
                    const deliveryAddressSelect = document.getElementById('deliveryAddress');
                    deliveryAddressSelect.innerHTML = '<option value="">Same as billing address</option>';
                    
                    if (data.additionalAddresses && data.additionalAddresses.length > 0) {
                        data.additionalAddresses.forEach((addr, index) => {
                            deliveryAddressSelect.innerHTML += `<option value="addr${index}">${addr.name} (${addr.address})</option>`;
                        });
                    }
                    
                    deliveryAddressSelect.innerHTML += '<option value="other">Other Address</option>';
                })
                .catch(error => {
                    console.error('Error fetching customer details:', error);
                });
        }
        
        // Function to calculate line total
        function calculateLineTotal(input) {
            const row = input.closest('tr');
            const quantity = parseFloat(row.querySelector('[name="quantity"]').value) || 0;
            const unitPrice = parseFloat(row.querySelector('[name="unitPrice"]').value) || 0;
            const discount = parseFloat(row.querySelector('[name="discount"]').value) || 0;
            const taxRate = parseFloat(row.querySelector('[name="taxRate"]').value) || 0;
            
            const subtotal = quantity * unitPrice;
            const discountAmount = subtotal * (discount / 100);
            const taxableAmount = subtotal - discountAmount;
            const taxAmount = taxableAmount * (taxRate / 100);
            const lineTotal = taxableAmount + taxAmount;
            
            row.querySelector('[name="lineTotal"]').textContent = lineTotal.toFixed(2);
            
            calculateTotals();
        }
        
        // Function to calculate order totals
        function calculateTotals() {
            const rows = document.querySelectorAll('#soItemsTable tbody tr');
            let subtotal = 0;
            let totalDiscount = 0;
            let totalTax = 0;
            
            rows.forEach(row => {
                const quantity = parseFloat(row.querySelector('[name="quantity"]').value) || 0;
                const unitPrice = parseFloat(row.querySelector('[name="unitPrice"]').value) || 0;
                const discount = parseFloat(row.querySelector('[name="discount"]').value) || 0;
                
                const lineSubtotal = quantity * unitPrice;
                const lineDiscount = lineSubtotal * (discount / 100);
                const lineTaxable = lineSubtotal - lineDiscount;
                
                subtotal += lineSubtotal;
                totalDiscount += lineDiscount;
                
                const taxRate = parseFloat(row.querySelector('[name="taxRate"]').value) || 0;
                totalTax += lineTaxable * (taxRate / 100);
            });
            
            const shippingFee = parseFloat(document.getElementById('shippingFee').value) || 0;
            const grandTotal = subtotal - totalDiscount + totalTax + shippingFee;
            
            document.getElementById('subtotal').textContent = subtotal.toFixed(2);
            document.getElementById('totalDiscount').textContent = totalDiscount.toFixed(2);
            document.getElementById('totalTax').textContent = totalTax.toFixed(2);
            document.getElementById('grandTotal').textContent = grandTotal.toFixed(2);
            
            document.getElementById('amountInWords').textContent = convertToWords(grandTotal);
            
            // Check credit limit if customer is selected
            if (selectedCustomer && selectedCustomer.creditLimit && grandTotal > selectedCustomer.creditLimit) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Credit Limit Exceeded',
                    text: `This order exceeds the customer's credit limit of ${selectedCustomer.creditLimit.toFixed(2)}`,
                    confirmButtonText: 'OK'
                });
            }
        }
        
        // Function to convert number to words
        function convertToWords(num) {
            // Simplified implementation - consider using a library for production
            const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];
            const teens = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
            const tens = ['', 'Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            
            if (num === 0) return 'Zero';
            
            let result = '';
            const dollars = Math.floor(num);
            const cents = Math.round((num - dollars) * 100);
            
            if (dollars >= 1000000) {
                const millions = Math.floor(dollars / 1000000);
                result += convertToWords(millions) + ' Million ';
            }
            
            if (dollars >= 1000) {
                const thousands = Math.floor((dollars % 1000000) / 1000);
                if (thousands > 0) {
                    result += convertToWords(thousands) + ' Thousand ';
                }
            }
            
            const hundreds = Math.floor((dollars % 1000) / 100);
            if (hundreds > 0) {
                result += ones[hundreds] + ' Hundred ';
            }
            
            const remainder = dollars % 100;
            if (remainder > 0) {
                if (remainder < 10) {
                    result += ones[remainder];
                } else if (remainder < 20) {
                    result += teens[remainder - 10];
                } else {
                    result += tens[Math.floor(remainder / 10)];
                    if (remainder % 10 > 0) {
                        result += ' ' + ones[remainder % 10];
                    }
                }
            }
            
            result += ' Dollars';
            
            if (cents > 0) {
                result += ' and ';
                if (cents < 10) {
                    result += ones[cents];
                } else if (cents < 20) {
                    result += teens[cents - 10];
                } else {
                    result += tens[Math.floor(cents / 10)];
                    if (cents % 10 > 0) {
                        result += ' ' + ones[cents % 10];
                    }
                }
                result += ' Cents';
            }
            
            return result;
        }
        
        // Function to add a new row to the SO items table
        function addRow(tableId) {
            const table = document.getElementById(tableId);
            const tbody = table.querySelector('tbody');
            const newRow = document.createElement('tr');
            
            newRow.innerHTML = `
                <td><input type="text" name="productCode" placeholder="Enter product code"></td>
                <td><input type="text" name="description" placeholder="Product description"></td>
                <td><input type="number" name="quantity" min="1" value="1" required onchange="calculateLineTotal(this)"></td>
                <td>
                    <select name="unit">
                        <option value="EA">EA</option>
                        <option value="KG">KG</option>
                        <option value="L">Liter</option>
                        <option value="M">Meter</option>
                    </select>
                </td>
                <td><input type="number" name="unitPrice" min="0" step="0.01" required onchange="calculateLineTotal(this)"></td>
                <td><input type="number" name="discount" min="0" max="100" value="0" onchange="calculateLineTotal(this)"></td>
                <td>
                    <select name="taxRate" onchange="calculateLineTotal(this)">
                        <option value="0">0%</option>
                        <option value="5">5%</option>
                        <option value="10" selected>10%</option>
                        <option value="18">18%</option>
                    </select>
                </td>
                <td><span name="lineTotal">0.00</span></td>
                <td><button class="deleteRowBtn" onclick="deleteRow(this);">-</button></td>
            `;
            
            tbody.appendChild(newRow);
            checkTableForEmptyData(tableId);
        }
        
        // Function to delete a row
        function deleteRow(button) {
            const row = button.closest('tr');
            row.remove();
            calculateTotals();
            checkTableForEmptyData('soItemsTable');
        }
        
        // Function to validate the form
        function validateForm() {
            const requiredInputs = document.querySelectorAll('input[required], select[required], textarea[required]');
            let isValid = true;
            
            // Clear previous error messages
            document.querySelectorAll('.error-message').forEach(error => error.remove());
            
            requiredInputs.forEach(input => {
                if (!input.value) {
                    const errorMessage = document.createElement('div');
                    errorMessage.className = 'error-message';
                    errorMessage.textContent = 'This field is required';
                    input.after(errorMessage);
                    input.classList.add('invalid');
                    isValid = false;
                } else {
                    input.classList.remove('invalid');
                }
            });
            
            // Validate at least one SO item exists
            const soItems = document.querySelectorAll('#soItemsTable tbody tr');
            if (soItems.length === 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please add at least one item to the sales order'
                });
                isValid = false;
            }
            
            return isValid;
        }
        
        // Function to collect form data
        function collectFormData() {
            if (!validateForm()) {
                return null;
            }
            
            const payload = {
                soInfo: {},
                items: [],
                totals: {},
                additionalInfo: {}
            };
            
            // Collect SO information
            const soForm = document.getElementById('soForm');
            const formData = new FormData(soForm);
            formData.forEach((value, key) => {
                payload.soInfo[key] = value;
            });
            
            // Collect items
            const rows = document.querySelectorAll('#soItemsTable tbody tr');
            rows.forEach(row => {
                const item = {
                    productCode: row.querySelector('[name="productCode"]')?.value || '',
                    description: row.querySelector('[name="description"]')?.value || '',
                    quantity: parseFloat(row.querySelector('[name="quantity"]').value),
                    unit: row.querySelector('[name="unit"]').value,
                    unitPrice: parseFloat(row.querySelector('[name="unitPrice"]').value),
                    discount: parseFloat(row.querySelector('[name="discount"]').value || 0),
                    taxRate: parseFloat(row.querySelector('[name="taxRate"]').value),
                    lineTotal: parseFloat(row.querySelector('[name="lineTotal"]').textContent)
                };
                
                const productIdInput = row.querySelector('[name="productId"]');
                if (productIdInput) {
                    item.productId = productIdInput.value;
                }
                
                payload.items.push(item);
            });
            
            // Collect totals
            payload.totals = {
                subtotal: parseFloat(document.getElementById('subtotal').textContent),
                discount: parseFloat(document.getElementById('totalDiscount').textContent),
                tax: parseFloat(document.getElementById('totalTax').textContent),
                shipping: parseFloat(document.getElementById('shippingFee').value),
                grandTotal: parseFloat(document.getElementById('grandTotal').textContent)
            };
            
            // Collect additional information
            const additionalForm = document.getElementById('additionalInfoForm');
            const additionalData = new FormData(additionalForm);
            additionalData.forEach((value, key) => {
                payload.additionalInfo[key] = value;
            });
            
            return payload;
        }
        
        // Function to submit the sales order
        function submitSalesOrder() {
            const payload = collectFormData();
            if (!payload) return;
            
            fetch('/api/sales-orders', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            })
            .then(response => response.json())
            .then(data => {
                Swal.fire({
                    icon: 'success',
                    title: 'Sales Order Created!',
                    text: `SO Number: ${data.soNumber}`,
                    confirmButtonText: 'OK'
                }).then(() => {
                    window.location.href = `/sales-orders/${data._id}`;
                });
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to create sales order'
                });
            });
        }
        
        // Function to save as draft
        function saveAsDraft() {
            const payload = collectFormData();
            if (!payload) return;
            
            payload.status = 'draft';
            
            fetch('/api/sales-orders/draft', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            })
            .then(response => response.json())
            .then(data => {
                Swal.fire({
                    icon: 'success',
                    title: 'Draft Saved!',
                    text: `SO Number: ${data.soNumber}`,
                    confirmButtonText: 'OK'
                });
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to save draft'
                });
            });
        }
        
        // Function to print the sales order
        function printSalesOrder() {
            // In a real application, this would open a print-optimized view
            window.open('/sales-orders/print?draft=true', '_blank');
        }
        
        // Function to clear the form
        function clearForm() {
            if (confirm('Are you sure you want to clear the form? All entered data will be lost.')) {
                document.getElementById('soForm').reset();
                document.getElementById('additionalInfoForm').reset();
                document.getElementById('soItemsTable').getElementsByTagName('tbody')[0].innerHTML = '';
                document.getElementById('customerInfo').style.display = 'none';
                document.getElementById('subtotal').textContent = '0.00';
                document.getElementById('totalDiscount').textContent = '0.00';
                document.getElementById('totalTax').textContent = '0.00';
                document.getElementById('grandTotal').textContent = '0.00';
                document.getElementById('amountInWords').textContent = 'Zero';
                document.getElementById('shippingFee').value = '0.00';
                
                // Reset date fields
                const today = new Date().toISOString().split('T')[0];
                document.getElementById('soDate').value = today;
                
                const deliveryDate = new Date();
                deliveryDate.setDate(deliveryDate.getDate() + 3);
                document.getElementById('deliveryDate').value = deliveryDate.toISOString().split('T')[0];
            }
        }
        
        // Function to mark required fields
        function markRequiredFields() {
            const requiredFields = document.querySelectorAll('input[required], select[required], textarea[required]');
            
            requiredFields.forEach(field => {
                const label = document.querySelector(`label[for="${field.id}"]`);
                if (label && !label.querySelector('.required')) {
                    const asterisk = document.createElement('span');
                    asterisk.textContent = ' *';
                    asterisk.style.color = 'red';
                    asterisk.classList.add('required');
                    label.appendChild(asterisk);
                }
                
                const th = field.closest('table')?.querySelector(`th:nth-child(${field.closest('td').cellIndex + 1})`);
                if (th && !th.querySelector('.required')) {
                    const asterisk = document.createElement('span');
                    asterisk.textContent = ' *';
                    asterisk.style.color = 'red';
                    asterisk.classList.add('required');
                    th.appendChild(asterisk);
                }
            });
        }
        
        // Function to check for empty tables
        function checkTableForEmptyData(tableId) {
            const table = document.getElementById(tableId);
            const tableBody = table.querySelector('tbody');
            if (!tableBody) return;
            
            const noDataRowId = `${tableId}-noData`;
            const existingNoDataRow = document.getElementById(noDataRowId);
            
            if (tableBody.rows.length === 0) {
                if (!existingNoDataRow) {
                    const noDataRow = document.createElement('tr');
                    noDataRow.id = noDataRowId;
                    const noDataCell = document.createElement('td');
                    const columnCount = table.querySelectorAll('th').length;
                    noDataCell.colSpan = columnCount;
                    
                    const noDataImage = document.createElement('img');
                    noDataImage.src = '/images/nodata.jpg';
                    noDataImage.alt = 'No data available';
                    noDataImage.style.display = 'block';
                    noDataImage.style.margin = '20px auto';
                    
                    noDataCell.appendChild(noDataImage);
                    noDataRow.appendChild(noDataCell);
                    tableBody.appendChild(noDataRow);
                }
            } else {
                if (existingNoDataRow) {
                    existingNoDataRow.remove();
                }
            }
        }
        
        // Function to check all tables on page load
        function tableDataCheck() {
            const tables = document.querySelectorAll('table');
            tables.forEach(table => {
                if (!table.id) {
                    table.id = `table-${Math.random().toString(36).substr(2, 9)}`;
                }
                checkTableForEmptyData(table.id);
            });
        }
        
        // Function to toggle table visibility
        function toggleTable(button) {
            const value = button.innerText;
            const collapse = button.closest('.section-header').nextElementSibling;
            button.innerText = value === '+' ? '-' : '+';
            collapse.style.display = collapse.style.display === 'none' ? '' : 'none';
        }
    </script>
</body>
</html>