<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Invoice</title>
        {{> commonStyles}}

    <link rel="stylesheet" href="/css/layout.css">
    <link rel="stylesheet" href="/css/popupTable.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script src="../js/utils.js"></script>
    <script src="/js/layout.js"></script>
    <script src="../js/embeddedPopup.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <style>
        /* Base styles */
        .error-message { color: red; font-size: 12px; margin-top: 4px; }
        .invalid { border-color: red; }
        
        /* Invoice-specific styles */
        .invoice-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .invoice-title {
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
        }
        
        .invoice-meta {
            text-align: right;
        }
        
        .invoice-number {
            font-size: 18px;
            font-weight: bold;
        }
        
        .invoice-date {
            color: #7f8c8d;
        }
        
        .company-info, .customer-info {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .company-info {
            border-left: 4px solid #3498db;
        }
        
        .customer-info {
            border-left: 4px solid #e74c3c;
        }
        
        .info-header {
            margin-top: 0;
            color: #2c3e50;
            border-bottom: 1px solid #eee;
            padding-bottom: 5px;
        }
        
        .invoice-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        
        .invoice-table th {
            background: #f8f9fa;
            text-align: left;
            padding: 10px;
            border-bottom: 2px solid #ddd;
        }
        
        .invoice-table td {
            padding: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .invoice-table tr:last-child td {
            border-bottom: 2px solid #ddd;
        }
        
        .totals-section {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
        }
        
        .total-line {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
        }
        
        .total-label {
            font-weight: bold;
            color: #2c3e50;
        }
        
        .total-value {
            min-width: 120px;
            text-align: right;
        }
        
        .grand-total {
            font-size: 1.2em;
            border-top: 1px solid #ddd;
            padding-top: 10px;
            margin-top: 10px;
            font-weight: bold;
            color: #e74c3c;
        }
        
        .amount-in-words {
            font-style: italic;
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px dashed #ddd;
            color: #7f8c8d;
        }
        
        .payment-info {
            margin-top: 20px;
        }
        
        .terms-conditions {
            margin-top: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 5px;
        }
        
        .action-buttons {
            margin-top: 20px;
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .invoice-header {
                flex-direction: column;
            }
            
            .invoice-meta {
                text-align: left;
                margin-top: 10px;
            }
            
            .info-columns {
                flex-direction: column;
            }
        }
    </style>
</head>

<body>
    {{> sidebar}}
    {{> topbar user=user}}

    <main class="main-content shifted">
        <div class="sub-container">
            <div class="mini-container formContainter">
                <div class="section-header">
                    <span class="containerInfo">
                        <button class="collapse-btn" onclick="toggleTable(this)">-</button>
                        <h3 class="container-hederText">Create Invoice</h3>
                    </span>
                </div>
                <span id="1">
                    <div class="invoice-header">
                        <div class="invoice-title">INVOICE</div>
                        <div class="invoice-meta">
                            <div class="invoice-number">Invoice #: <span id="invoiceNumber">INV-{{generateId}}</span></div>
                            <div class="invoice-date">Date: <input type="date" id="invoiceDate" name="invoiceDate" required></div>
                        </div>
                    </div>
                    
                    <div style="display: flex; gap: 20px;" class="info-columns">
                        <div class="company-info" style="flex: 1;">
                            <h4 class="info-header">From</h4>
                            <p><strong>{{company.name}}</strong></p>
                            <p>{{company.address}}</p>
                            <p>{{company.city}}, {{company.state}} {{company.zip}}</p>
                            <p>Phone: {{company.phone}}</p>
                            <p>Email: {{company.email}}</p>
                            <p>Tax ID: {{company.taxId}}</p>
                        </div>
                        
                        <div class="customer-info" style="flex: 1;">
                            <h4 class="info-header">Bill To</h4>
                            <select id="customer" name="customer" required onchange="getCustomerDetails(this.value)" style="width: 100%; margin-bottom: 10px;">
                                <option value="">Select Customer</option>
                                {{#each customers}}
                                <option value="{{this._id}}">{{this.name}} ({{this.code}})</option>
                                {{/each}}
                            </select>
                            <div id="customerDetails">
                                <p>Please select a customer</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="payment-info">
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                            <div>
                                <label for="dueDate">Due Date:</label>
                                <input type="date" id="dueDate" name="dueDate" required>
                            </div>
                            <div>
                                <label for="paymentTerms">Payment Terms:</label>
                                <select id="paymentTerms" name="paymentTerms" required>
                                    <option value="Net 15">Net 15</option>
                                    <option value="Net 30" selected>Net 30</option>
                                    <option value="Net 45">Net 45</option>
                                    <option value="Due on Receipt">Due on Receipt</option>
                                    <option value="Custom">Custom</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <table class="invoice-table">
                        <thead>
                            <tr>
                                <th>Item</th>
                                <th>Description</th>
                                <th>Qty</th>
                                <th>Rate</th>
                                <th>Discount</th>
                                <th>Tax</th>
                                <th>Amount</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="invoiceItems">
                            <!-- Items will be added here -->
                        </tbody>
                    </table>
                    
                    <div style="text-align: right; margin-bottom: 10px;">
                        <button class="btn" onclick="addInvoiceItem()">+ Add Item</button>
                        <button class="btn" onclick="showProductSelector()">Select Products</button>
                    </div>
                    
                    <div class="totals-section">
                        <div class="total-line">
                            <span class="total-label">Subtotal:</span>
                            <span class="total-value" id="subtotal">0.00</span>
                        </div>
                        <div class="total-line">
                            <span class="total-label">Discount:</span>
                            <span class="total-value" id="totalDiscount">0.00</span>
                        </div>
                        <div class="total-line">
                            <span class="total-label">Tax:</span>
                            <span class="total-value" id="totalTax">0.00</span>
                        </div>
                        <div class="total-line">
                            <span class="total-label">Shipping:</span>
                            <span class="total-value"><input type="number" id="shippingFee" name="shippingFee" value="0.00" min="0" step="0.01" onchange="calculateTotals()" style="width: 80px;"></span>
                        </div>
                        <div class="total-line grand-total">
                            <span class="total-label">Total Due:</span>
                            <span class="total-value" id="grandTotal">0.00</span>
                        </div>
                        <div class="amount-in-words" id="amountInWords">Zero Dollars</div>
                    </div>
                    
                    <div class="terms-conditions">
                        <label for="terms">Terms & Conditions:</label>
                        <textarea id="terms" name="terms" rows="3" style="width: 100%;">1. Payment due within 30 days
2. Late payments subject to 1.5% monthly interest
3. Goods remain our property until paid in full</textarea>
                    </div>
                    
                    <div class="action-buttons">
                        <button class="form-action-btn" id="saveDraftBtn" onclick="saveAsDraft()">Save Draft</button>
                        <button class="form-action-btn" id="previewBtn" onclick="previewInvoice()">Preview</button>
                        <button class="form-action-btn" id="submitBtn" onclick="submitInvoice()">Create Invoice</button>
                    </div>
                </span>
            </div>
        </div>
    </main>

    <!-- Product Selection Popup -->
    <div class="popuptable" id="productSelectorPopup" style="display: none;">
        <div class="popup-content" style="width: 80%; max-width: 900px;">
            <h3>Select Products</h3>
            <div style="margin-bottom: 15px;">
                <input type="text" id="productSearch" placeholder="Search products..." style="padding: 8px; width: 300px;">
                <button onclick="searchProducts()">Search</button>
            </div>
            <table style="width: 100%;">
                <thead>
                    <tr>
                        <th><input type="checkbox" id="selectAllProducts"></th>
                        <th>Product Code</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Stock</th>
                    </tr>
                </thead>
                <tbody id="productTableBody">
                    <!-- Products will be loaded here -->
                </tbody>
            </table>
            <div style="margin-top: 15px; text-align: right;">
                <button class="btn" onclick="addSelectedProducts()">Add Selected</button>
                <button class="close-popup" onclick="closeProductSelector()">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let selectedCustomer = null;
        let allProducts = [];
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            // Set today's date as default for invoice date
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('invoiceDate').value = today;
            
            // Set default due date to 30 days from today
            const dueDate = new Date();
            dueDate.setDate(dueDate.getDate() + 30);
            document.getElementById('dueDate').value = dueDate.toISOString().split('T')[0];
            
            // Load products
            loadProducts();
            
            // Add first empty row
            addInvoiceItem();
        });

        // Function to load products
        function loadProducts() {
            // In a real app, this would fetch from your API
            fetch('/api/products')
                .then(response => response.json())
                .then(data => {
                    allProducts = data;
                })
                .catch(error => {
                    console.error('Error loading products:', error);
                });
        }
        
        // Function to show product selector
        function showProductSelector() {
            // Populate product table
            const tableBody = document.getElementById('productTableBody');
            tableBody.innerHTML = '';
            
            allProducts.forEach(product => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><input type="checkbox" class="product-checkbox" data-id="${product._id}"></td>
                    <td>${product.code}</td>
                    <td>${product.name}</td>
                    <td>${product.description || ''}</td>
                    <td>${product.price.toFixed(2)}</td>
                    <td>${product.stock}</td>
                `;
                tableBody.appendChild(row);
            });
            
            // Set up select all checkbox
            document.getElementById('selectAllProducts').addEventListener('change', function() {
                const checkboxes = document.querySelectorAll('.product-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
            });
            
            // Show popup
            document.getElementById('productSelectorPopup').style.display = 'flex';
        }
        
        // Function to close product selector
        function closeProductSelector() {
            document.getElementById('productSelectorPopup').style.display = 'none';
        }
        
        // Function to add selected products to invoice
        function addSelectedProducts() {
            const checkboxes = document.querySelectorAll('.product-checkbox:checked');
            const itemsTable = document.getElementById('invoiceItems');
            
            checkboxes.forEach(checkbox => {
                const productId = checkbox.getAttribute('data-id');
                const product = allProducts.find(p => p._id === productId);
                
                if (product) {
                    addInvoiceItem(product);
                }
            });
            
            closeProductSelector();
            calculateTotals();
        }
        
        // Function to add a new invoice item
        function addInvoiceItem(product = null) {
            const itemsTable = document.getElementById('invoiceItems');
            const newRow = document.createElement('tr');
            
            if (product) {
                newRow.innerHTML = `
                    <td>
                        <input type="hidden" name="productId" value="${product._id}">
                        ${product.code}
                    </td>
                    <td>${product.name}</td>
                    <td><input type="number" name="quantity" min="1" value="1" required onchange="calculateLineTotal(this)"></td>
                    <td><input type="number" name="rate" min="0" step="0.01" value="${product.price.toFixed(2)}" required onchange="calculateLineTotal(this)"></td>
                    <td><input type="number" name="discount" min="0" max="100" value="0" onchange="calculateLineTotal(this)"></td>
                    <td>
                        <select name="taxRate" onchange="calculateLineTotal(this)">
                            <option value="0">0%</option>
                            <option value="5">5%</option>
                            <option value="10" selected>10%</option>
                            <option value="18">18%</option>
                        </select>
                    </td>
                    <td><span name="amount">${product.price.toFixed(2)}</span></td>
                    <td><button class="deleteRowBtn" onclick="deleteInvoiceItem(this)">×</button></td>
                `;
            } else {
                newRow.innerHTML = `
                    <td><input type="text" name="item" placeholder="Item code"></td>
                    <td><input type="text" name="description" placeholder="Description"></td>
                    <td><input type="number" name="quantity" min="1" value="1" required onchange="calculateLineTotal(this)"></td>
                    <td><input type="number" name="rate" min="0" step="0.01" value="0.00" required onchange="calculateLineTotal(this)"></td>
                    <td><input type="number" name="discount" min="0" max="100" value="0" onchange="calculateLineTotal(this)"></td>
                    <td>
                        <select name="taxRate" onchange="calculateLineTotal(this)">
                            <option value="0">0%</option>
                            <option value="5">5%</option>
                            <option value="10" selected>10%</option>
                            <option value="18">18%</option>
                        </select>
                    </td>
                    <td><span name="amount">0.00</span></td>
                    <td><button class="deleteRowBtn" onclick="deleteInvoiceItem(this)">×</button></td>
                `;
            }
            
            itemsTable.appendChild(newRow);
            calculateTotals();
        }
        
        // Function to delete an invoice item
        function deleteInvoiceItem(button) {
            const row = button.closest('tr');
            row.remove();
            calculateTotals();
        }
        
        // Function to calculate line total
        function calculateLineTotal(input) {
            const row = input.closest('tr');
            const quantity = parseFloat(row.querySelector('[name="quantity"]').value) || 0;
            const rate = parseFloat(row.querySelector('[name="rate"]').value) || 0;
            const discount = parseFloat(row.querySelector('[name="discount"]').value) || 0;
            const taxRate = parseFloat(row.querySelector('[name="taxRate"]').value) || 0;
            
            const subtotal = quantity * rate;
            const discountAmount = subtotal * (discount / 100);
            const taxableAmount = subtotal - discountAmount;
            const taxAmount = taxableAmount * (taxRate / 100);
            const lineTotal = taxableAmount + taxAmount;
            
            row.querySelector('[name="amount"]').textContent = lineTotal.toFixed(2);
            
            calculateTotals();
        }
        
        // Function to calculate invoice totals
        function calculateTotals() {
            const rows = document.querySelectorAll('#invoiceItems tr');
            let subtotal = 0;
            let totalDiscount = 0;
            let totalTax = 0;
            
            rows.forEach(row => {
                const quantity = parseFloat(row.querySelector('[name="quantity"]').value) || 0;
                const rate = parseFloat(row.querySelector('[name="rate"]').value) || 0;
                const discount = parseFloat(row.querySelector('[name="discount"]').value) || 0;
                
                const lineSubtotal = quantity * rate;
                const lineDiscount = lineSubtotal * (discount / 100);
                const lineTaxable = lineSubtotal - lineDiscount;
                
                subtotal += lineSubtotal;
                totalDiscount += lineDiscount;
                
                const taxRate = parseFloat(row.querySelector('[name="taxRate"]').value) || 0;
                totalTax += lineTaxable * (taxRate / 100);
            });
            
            const shippingFee = parseFloat(document.getElementById('shippingFee').value) || 0;
            const grandTotal = subtotal - totalDiscount + totalTax + shippingFee;
            
            document.getElementById('subtotal').textContent = subtotal.toFixed(2);
            document.getElementById('totalDiscount').textContent = totalDiscount.toFixed(2);
            document.getElementById('totalTax').textContent = totalTax.toFixed(2);
            document.getElementById('grandTotal').textContent = grandTotal.toFixed(2);
            
            document.getElementById('amountInWords').textContent = convertToWords(grandTotal);
        }
        
        // Function to convert number to words
        function convertToWords(num) {
            // Simplified implementation - consider using a library for production
            const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];
            const teens = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
            const tens = ['', 'Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            
            if (num === 0) return 'Zero Dollars';
            
            let result = '';
            const dollars = Math.floor(num);
            const cents = Math.round((num - dollars) * 100);
            
            if (dollars >= 1000000) {
                const millions = Math.floor(dollars / 1000000);
                result += convertToWords(millions) + ' Million ';
            }
            
            if (dollars >= 1000) {
                const thousands = Math.floor((dollars % 1000000) / 1000);
                if (thousands > 0) {
                    result += convertToWords(thousands) + ' Thousand ';
                }
            }
            
            const hundreds = Math.floor((dollars % 1000) / 100);
            if (hundreds > 0) {
                result += ones[hundreds] + ' Hundred ';
            }
            
            const remainder = dollars % 100;
            if (remainder > 0) {
                if (remainder < 10) {
                    result += ones[remainder];
                } else if (remainder < 20) {
                    result += teens[remainder - 10];
                } else {
                    result += tens[Math.floor(remainder / 10)];
                    if (remainder % 10 > 0) {
                        result += ' ' + ones[remainder % 10];
                    }
                }
            }
            
            result += ' Dollars';
            
            if (cents > 0) {
                result += ' and ';
                if (cents < 10) {
                    result += ones[cents];
                } else if (cents < 20) {
                    result += teens[cents - 10];
                } else {
                    result += tens[Math.floor(cents / 10)];
                    if (cents % 10 > 0) {
                        result += ' ' + ones[cents % 10];
                    }
                }
                result += ' Cents';
            }
            
            return result;
        }
        
        // Function to get customer details
        function getCustomerDetails(customerId) {
            if (!customerId) {
                document.getElementById('customerDetails').innerHTML = '<p>Please select a customer</p>';
                selectedCustomer = null;
                return;
            }
            
            fetch(`/api/customers/${customerId}`)
                .then(response => response.json())
                .then(data => {
                    selectedCustomer = data;
                    const customerDetails = document.getElementById('customerDetails');
                    
                    customerDetails.innerHTML = `
                        <p><strong>${data.name}</strong></p>
                        <p>${data.address}</p>
                        <p>${data.city}, ${data.state} ${data.zip}</p>
                        <p>Phone: ${data.phone}</p>
                        <p>Email: ${data.email}</p>
                        <p>Tax ID: ${data.taxId || 'N/A'}</p>
                    `;
                    
                    // Check credit limit if applicable
                    if (data.creditLimit) {
                        const grandTotal = parseFloat(document.getElementById('grandTotal').textContent) || 0;
                        if (grandTotal > data.creditLimit) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Credit Limit Exceeded',
                                text: `This invoice exceeds the customer's credit limit of ${data.creditLimit.toFixed(2)}`,
                                confirmButtonText: 'OK'
                            });
                        }
                    }
                })
                .catch(error => {
                    console.error('Error fetching customer details:', error);
                });
        }
        
        // Function to validate the invoice
        function validateInvoice() {
            let isValid = true;
            
            // Clear previous error messages
            document.querySelectorAll('.error-message').forEach(error => error.remove());
            
            // Validate required fields
            const requiredFields = [
                { id: 'customer', message: 'Customer is required' },
                { id: 'invoiceDate', message: 'Invoice date is required' },
                { id: 'dueDate', message: 'Due date is required' }
            ];
            
            requiredFields.forEach(field => {
                const element = document.getElementById(field.id);
                if (!element.value) {
                    const errorMessage = document.createElement('div');
                    errorMessage.className = 'error-message';
                    errorMessage.textContent = field.message;
                    element.after(errorMessage);
                    element.classList.add('invalid');
                    isValid = false;
                } else {
                    element.classList.remove('invalid');
                }
            });
            
            // Validate at least one invoice item
            const items = document.querySelectorAll('#invoiceItems tr');
            if (items.length === 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'No Items',
                    text: 'Please add at least one item to the invoice',
                    confirmButtonText: 'OK'
                });
                isValid = false;
            }
            
            return isValid;
        }
        
        // Function to collect invoice data
        function collectInvoiceData() {
            if (!validateInvoice()) {
                return null;
            }
            
            const invoiceData = {
                invoiceInfo: {},
                customer: {},
                items: [],
                totals: {},
                terms: document.getElementById('terms').value
            };
            
            // Basic invoice info
            invoiceData.invoiceInfo = {
                number: document.getElementById('invoiceNumber').textContent,
                date: document.getElementById('invoiceDate').value,
                dueDate: document.getElementById('dueDate').value,
                paymentTerms: document.getElementById('paymentTerms').value
            };
            
            // Customer info
            if (selectedCustomer) {
                invoiceData.customer = {
                    id: selectedCustomer._id,
                    name: selectedCustomer.name,
                    address: selectedCustomer.address,
                    taxId: selectedCustomer.taxId
                };
            }
            
            // Invoice items
            const rows = document.querySelectorAll('#invoiceItems tr');
            rows.forEach(row => {
                const item = {
                    productId: row.querySelector('[name="productId"]')?.value || '',
                    item: row.querySelector('[name="item"]')?.value || '',
                    description: row.querySelector('[name="description"]')?.value || '',
                    quantity: parseFloat(row.querySelector('[name="quantity"]').value),
                    rate: parseFloat(row.querySelector('[name="rate"]').value),
                    discount: parseFloat(row.querySelector('[name="discount"]').value || 0),
                    taxRate: parseFloat(row.querySelector('[name="taxRate"]').value),
                    amount: parseFloat(row.querySelector('[name="amount"]').textContent)
                };
                invoiceData.items.push(item);
            });
            
            // Totals
            invoiceData.totals = {
                subtotal: parseFloat(document.getElementById('subtotal').textContent),
                discount: parseFloat(document.getElementById('totalDiscount').textContent),
                tax: parseFloat(document.getElementById('totalTax').textContent),
                shipping: parseFloat(document.getElementById('shippingFee').value),
                grandTotal: parseFloat(document.getElementById('grandTotal').textContent)
            };
            
            return invoiceData;
        }
        
        // Function to submit the invoice
        function submitInvoice() {
            const invoiceData = collectInvoiceData();
            if (!invoiceData) return;
            
            fetch('/api/invoices', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(invoiceData)
            })
            .then(response => response.json())
            .then(data => {
                Swal.fire({
                    icon: 'success',
                    title: 'Invoice Created!',
                    text: `Invoice Number: ${data.invoiceNumber}`,
                    confirmButtonText: 'OK'
                }).then(() => {
                    window.location.href = `/invoices/${data._id}`;
                });
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to create invoice'
                });
            });
        }
        
        // Function to save as draft
        function saveAsDraft() {
            const invoiceData = collectInvoiceData();
            if (!invoiceData) return;
            
            invoiceData.status = 'draft';
            
            fetch('/api/invoices/draft', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(invoiceData)
            })
            .then(response => response.json())
            .then(data => {
                Swal.fire({
                    icon: 'success',
                    title: 'Draft Saved!',
                    text: `Invoice Number: ${data.invoiceNumber}`,
                    confirmButtonText: 'OK'
                });
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to save draft'
                });
            });
        }
        
        // Function to preview invoice
        function previewInvoice() {
            const invoiceData = collectInvoiceData();
            if (!invoiceData) return;
            
            // In a real app, this would open a preview window
            window.open(`/invoices/preview?data=${encodeURIComponent(JSON.stringify(invoiceData))}`, '_blank');
        }
        
        // Function to toggle table visibility
        function toggleTable(button) {
            const value = button.innerText;
            const collapse = button.closest('.section-header').nextElementSibling;
            button.innerText = value === '+' ? '-' : '+';
            collapse.style.display = collapse.style.display === 'none' ? '' : 'none';
        }
    </script>
</body>
</html>