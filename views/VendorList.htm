
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>List</title>
    <link rel="stylesheet" href="../css/layout.css">
    <link rel="stylesheet" href="../css/table.css">

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="../js/utils.js"></script>

    <script src="../js/layout.js"></script>
    <script src="../js/embeddedPopup.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
<style>

.dialog-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: none;
    justify-content: center;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
    z-index: 9999; /* High z-index to stay above other elements */
}

.modal_container {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    width: 300px;
    padding: 20px;
    text-align: center; /* Center text inside */
}



/* Collaboration Icons */
.collaboration-icons {
      display: flex;
      gap: 15px;  /* Space between icons */
      align-items: center;
      justify-content: center;
    }

    .collaboration-icons i {
      font-size: 18px;
      color: #b0b0b0; /* Light gray default */
      transition: color 0.3s ease-in-out, transform 0.2s;
    }

    /* Active icon styles */
    .collaboration-icons i.active {
      color: #007bff; /* Blue for active icons */
    }


    /* Hover effect */
    .collaboration-icons i:hover {
      color: #0056b3;
      cursor: pointer;
      transform: scale(1.1); /* Slight zoom effect */
    }

          /* chart Style start  */
   

.chart-Section {
background: #fff;
display: block;
border-radius: 8px;
box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
margin-bottom: 20px;
}

.chart-container {
margin: 0 auto;
width: 400px;
text-align: center;
}

/* Make the chart visible by default */
#myChart {
display: block;
/* Start as visible */
}

.collapse-btn {
background: none;
position: absolute;
border: none;
font-size: 18px;
cursor: pointer;
transition: transform 0.3s;
}

.collapsed {
transform: rotate(90deg);
}

/* chart style end */
</style>
    <style>
     .actions-container{
        margin-bottom: .5em;
     }

        .more-actions {
            display: none;
            position: absolute;
            background: #fff;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            width: max-content;
            margin-left: 100px;
            min-width: 100px;
            max-height: 200px; /* Limit the height of the popup */
            overflow-y: auto; /* Allow scrolling if content overflows */
            padding: 10px;
            border-radius: 8px;
        }

        .more-actions button {
            display: block;
            width: 90%;
            padding: 0.5rem;
color: white;
            margin-top: 10px;
            background: rgb(117, 109, 109);
            border: none;
            font-size: 1em;
            border-bottom: 1px solid #f81616;
            text-align: center;
            border-radius: 4px;
        }

    

        .more-actions button:last-child {
            border-bottom: none; /* Remove border from the last button */
        }

        .three-dot-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
        }
::-webkit-scrollbar{
    height: 0px;
    width:3px;
}


::-webkit-scrollbar-thumb{
    background: rgb(133, 132, 132);
}
        /* Mobile view styles */
        @media (max-width: 768px) {
            /* Hide all action buttons in mobile view */
            .actions-container .action-btn {
                display: none;
            }

            /* Show the three-dot button */
            .three-dot-btn {
                display: inline-block;
            }
        }
    </style>
       <style>
        
        /*filter popup styles */
        .filter-popup{
       position: fixed;
       right:-10px;          display: none;
                flex-direction: row;
                
                width: 300px;
                height: 100%;
                background-color: #f1f1f1;
                box-shadow: -2px 0 5px rgba(0, 0, 0, 0.5);
              
    z-index:100000;
        }
    
    
        .filter-content-left{
    margin-top: 2rem;
    padding: 20px;
            width: 50%;
        }
         .filter-content-right{
            margin-top: 2rem;
            overflow-y: auto;
               overflow-x: hidden
         }
        .filter-content-left,  .filter-content-right{
    
            width: 50%;
            border-left: #333 solid 2px;
        }
        .close-filter{
            position: absolute;
            margin: auto;
            font-size: 20px;
        }
        tfoot{
        position: sticky;
        bottom: 0;
        color: #f3f3f3;
        }
       tfoot tr td{
        background-color: #f2f2f2;
           color: #555;
       }
     
      .fa{
        cursor: pointer;
      }
        </style>
<!-- Code injected by Five-server -->
  <script async data-id="five-server" data-file="c:\Users\Aravind J\OneDrive - SCH Infotech Private Limited\Desktop\UI\PageLayouts\html\PageLayout.html" type="application/javascript" src="/fiveserver.js"></script>
  </head>

<body>
    <div class="sidebar active" id="sidebar">
        <h2>Menu</h2>
        <ul>
            <li><a href="inbox"><i class="fa fa-home"></i>Inbox</a></li>

                     <li><a href="/index"><i class="fa fa-home"></i>Home</a></li>
    
             <li><a href="/views/LandingPage.html"><i class="fa fa-bar-chart fa-fw"></i><span class="menuname">Dashboard</span></i></a></li>
             <li>
                <a href="javascript:void(0)"><i class="fa fa-truck"></i><span class="menuname">Suppliers</span ><span class="arrow">></span></a>
                <ul class="submenu">
                    <li><a href="/views/VendorRegisteration.htm"><i class="fa fa-truck"></i><span class="menuname">Supplier Registeration</span></a></li>
                    <li><a href="/views/VendorList.htm"><i class="fa fa-truck"></i><span class="menuname">Supplier List</span></a></li>
                </ul>
            </li>
            <li>
                <a href="javascript:void(0)"><i class="fa fa-cubes"></i><span class="menuname">Material</span ><span class="arrow">></span></a>
                <ul class="submenu">
                    <li><a href="/views/InsertMaterial.htm"><i class="fa fa-cubes"></i><span class="menuname">Create Material</span></a></li>
                    <li><a href="/views/MaterialList.htm"><i class="fa fa-cubes"></i><span class="menuname">Material List</span></a></li>
                </ul>
            </li>
             <li>
                <a href="javascript:void(0)"><i class="fa fa-shopping-bag"></i><span class="menuname">Sales Orders</span ><span class="arrow">></span></a>
                <ul class="submenu">
                    <li><a href="create-sales-order.html"><i class="fa fa-shopping-bag"></i><span class="menuname">Create Sales Order</span></a></li>
                    <li><a href="sales-order-list.html"><i class="fa fa-shopping-bag"></i><span class="menuname">Sales Order List</span></a></li>
                </ul>
            </li>
            <li>
                <a href="javascript:void(0)"><i class="fa fa-shopping-cart"></i><span class="menuname">Purchase Orders </span><span class="arrow">></span></a>
                <ul class="submenu">
                    <li><a href="create-purchase-order.html"><i class="fa fa-shopping-cart"></i><span class="menuname">Create Purchase Order</span></i></a></li>
                    <li><a href="purchase-order-list.html"><i class="fa fa-shopping-cart"></i><span class="menuname">Purchase Order List</span></a></li>
                </ul>
            </li>
            <li>
                <a href="javascript:void(0)"><i class="fa fa-user"></i><span class="menuname">Users</span><span class="arrow">></span></a>
                <ul class="submenu">
                    <li><a href="user-list.html"><i class="fa fa-user"></i><span>User List</span></a></li>
                    <li><a href="create-user.html"><i class="fa fa-user"></i><span>Create User</span></a></li>
                </ul>
            </li>
            <li>
                <a href="javascript:void(0)"><i class="fa fa-tag"></i><span class="menuname">Buyers</span><span class="arrow">></span></a>
                <ul class="submenu">
                    <li><a href="/getUserList"><i class="fa fa-tag"></i><span>Buyers List</span></a></li>
                </ul>
            </li>
        </ul>
    </div>

 <head>
<div class="topbar">
    <button class="open-btn" onclick="toggleSidebar2()">☰</button>
    <h2>Smart Inventory System</h2>
    <div class="topbar-menu">
        <a href="/socket"><i class="fa fa-comments-o"></i>Chat Room</a>
        <a href="#">About Us</a>
        <a href="#">Contacts</a>
        <a href="#"><i class="fa fa-bell"></i></a>
        <a onclick="logout()"><i class="fa fa-sign-out"></i>Logout</a>
        <a href="/user/userProfile?user={{user}}"> <img class="profile" src="../images/home.jpg" alt="Picture"></a>

    </div>
</div>
</head>


    <main class="main-content shifted">
       
        <div class="sub-container">
            <div class="container">
                <button class="collapse-btn" onclick="toggleChart('chart-Section')"
                    id="collapse-btn"><span>➡️</span></button>

                <div class="chart-Section" id="chart-Section">
                    <div class="table-header">
                        <h3>Chart</h3>
                    </div>
                    <div class="chart-container" id="chart-container">
                        <div class="controls">
                            <select id="chartTypeSelect" onchange="updateChart()">
                                <option value="bar">Bar Chart</option>
                                <option value="line">Line Chart</option>
                                <option value="pie">Pie Chart</option>
                            </select>
                            <select id="dataSelect" onchange="updateChartData()">
                                <option value="status">status</option>
                              
                            </select>
                        </div>

                        <canvas id="myChart"></canvas>
                    </div>

                </div>

            </div>
        </div>
        <div class="sub-container">
            <div class="mini-container list-container">

                <div class="list-header">
                    <span class="containerInfo">
                    <button class="collapse-btn" onclick="toggleTable(this)">-</button>

                    <h3 class="container-hederText">List of Items</h3>
                        
                    </span>
                    <div class="actions-container" id="actionsContainer">

                        <input type="text" id="searchInput" onkeyup="searchTable1(this.id)"
                            placeholder="Search for anything.." hidden>
                        <button class="action-btn icon-btn" onclick="headerCall()">&#x1f50d;</button>
<button class="action-btn" onclick="location.href=href='/updateStock'">Update stock</button>
                        <!-- Filter icon, you can use your preferred icon here -->
                        <button id="action-btn header-btn" class="action-btn download-btn" onclick="openExcelpopup()">&#x2B73;</button>

                        <button class="action-btn header-btn-2" onclick="window.location.href='/cardView'">Card View</button>
                        <button class="action-btn">Action 9</button>
                        <button class="action-btn">Action 10</button>
                        <button class="action-btn fa" onclick="openFilter()">&#xf0b0;</button>
                        <button class="fa" onclick="openFilter()">&#xf0b0;</button>

                        <button class="three-dot-btn" onclick="togglePopup()">⋮</button>
                        <div class="more-actions" id="moreActions"></div>

                    </div>

                    </div>
              

                <span class="collpase-container" id="collpase-container">
                  
                    <div class="table-container">
                        <table id="customers">
                            <thead>
                            <tr>
                                <th data-column="Suppliers" onclick="sortTable(this)">Supplier ID <i class="fa fa-sort"></i></th>
                                <th>Inbox</th>
                                <th>Supplier Name</th>
                             

                                <th id="contact">Contact</th>
                                <th>Email</th>
                            
                                <th>Regiseration Date</th>
                                <th>Status</th>
                                <th>Edit</th>
                                <th>Delete</th>
                            
                                
                              
                                <th>Category Details</th>
                                  
                                <th>Collaboration</th>

                            </tr>
                            </thead>
                                <tbody id="materials">
                   

</tbody>
<tfoot><tr class="test">
            <td colspan="3">Total</td>
        
            <td id="totalUnitPrice"></td>
            <td id="totalValue"></td>
            <td id="totalDeliveryCharges"></td>
            <td id="totalInvoiceQuantity"></td>
            <td id="totalInvoiceValue"></td>
              <td colspan="5"></td>
              
        </tr></tfoot>
  

                        </table>
                    </div>
                    <div class="pagination-controls">
                        <div class="rows-per-page">
                            <p id="table-count">{{count}}</p>

                        </div>

                        <div class="rows-per-page">
                            <label for="rowsPerPage">Rows per page:</label>
                            <select id="rowsPerPage" onchange="changeRowsPerPage(this.value)">
                                <option value="5">5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <!-- Add more options as needed -->
                            </select>
                        </div>

                        <div class="pagination" id="pagination">
                            <!-- Pagination links will be generated here -->
                        <a>1</a>
                        <a>2</a>
                        <a>3</a>
                        <a>4</a>
                        </div>
                    </div>
                  
                </span>

            </div>
         
        </div>
       
     

           
    </div>
</main>

<footer>
    <!-- <script>
        // const chartData = {
        //     Approved: [10, 15, 20],  // Sample data for approved
        //     Pending: [5, 10, 15],    // Sample data for pending
        //     Rejected: [2, 3, 5]      // Sample data for rejected
        // };

        // let myChart;

        // const ctx = document.getElementById('myChart').getContext('2d');

        function initChart() {
            myChart = new Chart(ctx, {
                type: 'bar', // Default type
                data: {
                    labels: ['Item 1', 'Item 2', 'Item 3'],
                    datasets: [{
                        label: 'Status Count',
                        data: chartData.Approved,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // function updateChart() {
        //     const chartType = document.getElementById('chartTypeSelect').value;
        //     myChart.config.type = chartType;
        //     myChart.update();
        // }

        // function updateChartData() {
        //     const selectedStatus = document.getElementById('dataSelect').value;
        //     myChart.data.datasets[0].data = chartData[selectedStatus];
        //     myChart.update();
        // }

        

    // Initialize chart data
    const chartData = {
        Registered: 0,
        Blocked: 0,
        Invited: 0,
        Submitted: 0
    };

    // Function to fetch data from /fetchPageData2
    async function fetchChartData() {
        try {
            const response = await fetch('/fetchPageData2'); // Fetch data from the endpoint
            const data = await response.json(); // Parse the JSON response

            // Extract chart data from the response
            if (data.items && data.items[0].chartData) {
                data.items[0].chartData.forEach(item => {
                    chartData[item.x] = item.y; // Update chartData with counts
                });
            }

            // Initialize or update the chart
            initChart();
        } catch (error) {
            console.error('Error fetching chart data:', error);
        }
    }

    // Initialize the chart
    const ctx = document.getElementById('myChart').getContext('2d');
    let myChart;

    function initChart() {
        if (myChart) {
            myChart.destroy(); // Destroy existing chart instance if it exists
        }

        myChart = new Chart(ctx, {
            type: 'bar', // Default type
            data: {
                labels: Object.keys(chartData),
                datasets: [{
                    label: 'Status Count',
                    data: Object.values(chartData),
                    backgroundColor: [
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)'
                    ],
                    borderColor: [
                        'rgba(75, 192, 192, 1)',
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    // Function to update chart type
    function updateChart() {
        const chartType = document.getElementById('chartTypeSelect').value;
        myChart.config.type = chartType;
        myChart.update();
    }

    // Function to toggle chart visibility
    function toggleChart(id) {
        const chart = document.getElementById(id);
        const header = document.querySelector('.collapse-btn');
        chart.style.display = (chart.style.display === 'none') ? 'block' : 'none';
        header.classList.toggle('collapsed');
    }

    // Fetch data and initialize the chart on page load
    window.onload = fetchChartData;

        function toggleChart(id) {
            const chart = document.getElementById(id);
            const header = document.querySelector('.collapse-btn');
            chart.style.display = (chart.style.display === 'none') ? 'block' : 'none';
            header.classList.toggle('collapsed');
        }

       


        window.onload = initChart; // Initialize the chart on page load
    </script> -->
    <script>
    // Initialize chart data
    let chartData = {};

    // Function to fetch data from /fetchPageData2
    async function fetchChartData() {
        try {
            const response = await fetch('/fetchPageData2'); // Fetch data from the endpoint
            const data = await response.json(); // Parse the JSON response

            // Extract chart data from the response
            if (data.items && data.items[0].chartData) {
                // Reset chartData
                chartData = {};

                // Dynamically populate chartData based on the response
                data.items[0].chartData.forEach(item => {
                    chartData[item.x] = item.y; // Add status and count to chartData
                });
            }

            // Initialize or update the chart
            initChart();
        } catch (error) {
            console.error('Error fetching chart data:', error);
        }
    }

    // Initialize the chart
    const ctx = document.getElementById('myChart').getContext('2d');
    let myChart;

    function initChart() {
        if (myChart) {
            myChart.destroy(); // Destroy existing chart instance if it exists
        }

        // Dynamically generate background and border colors based on the number of statuses
        const backgroundColors = Object.keys(chartData).map((_, index) => {
            const hue = (index * 50) % 360; // Generate a unique hue for each status
            return `hsla(${hue}, 70%, 50%, 0.2)`; // Light color for background
        });

        const borderColors = Object.keys(chartData).map((_, index) => {
            const hue = (index * 50) % 360; // Generate a unique hue for each status
            return `hsla(${hue}, 70%, 50%, 1)`; // Darker color for border
        });

        myChart = new Chart(ctx, {
            type: 'bar', // Default type
            data: {
                labels: Object.keys(chartData), // Dynamic labels based on statuses
                datasets: [{
                    label: 'Status Count',
                    data: Object.values(chartData), // Dynamic data based on counts
                    backgroundColor: backgroundColors,
                    borderColor: borderColors,
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            },
            onClick: (event, elements) => {
                        if (elements.length > 0) {
                            const clickedIndex = elements[0].index; // Get the index of the clicked bar
                            const clickedStatus = Object.keys(chartData)[clickedIndex]; // Get the status label
                            filterByStatus(clickedStatus); // Filter data based on the clicked status
                        }
                    }
        });


     
    }

    // Function to update chart type
    function updateChart() {
        const chartType = document.getElementById('chartTypeSelect').value;
        myChart.config.type = chartType;
        myChart.update();
    }

    // Function to toggle chart visibility
    function toggleChart(id) {
        const chart = document.getElementById(id);
        const header = document.querySelector('.collapse-btn');
        chart.style.display = (chart.style.display === 'none') ? 'block' : 'none';
        header.classList.toggle('collapsed');
    }
    function filterByStatus(data){
            console.log(status)
        }
    // Fetch data and initialize the chart on page load
    window.onload = fetchChartData;
</script>
    <script>
        const moreActions = document.getElementById("moreActions");
        const actionsContainer = document.getElementById("actionsContainer");

        // Function to move extra action buttons to the popup
        function moveButtonsToPopup() {
            // Clear the popup before moving the buttons
            moreActions.innerHTML = '';

            // Get all the action buttons
            const actionButtons = actionsContainer.querySelectorAll('.action-btn');

            // On mobile view, move all buttons to the popup
            if (window.innerWidth <= 768) {
                actionButtons.forEach(button => {
                    const buttonClone = button.cloneNode(true); // Clone each button
                    moreActions.appendChild(buttonClone);
                    button.style.display = 'none'; // Hide button in header
                });
            } else {
                // On larger view, move buttons beyond the 5th to the popup
                actionButtons.forEach((button, index) => {
                    if (index >= 3) {
                        const buttonClone = button.cloneNode(true); // Clone each button
                        moreActions.appendChild(buttonClone);
                        button.style.display = 'none'; // Hide extra buttons in header
                    } else {
                        button.style.display = 'inline-block'; // Show first 5 buttons in header
                    }
                });
            }
        }

        // Toggle popup visibility
        function togglePopup() {
            moreActions.style.display = moreActions.style.display === 'block' ? 'none' : 'block';
        }

        // Close popup on outside click
        document.addEventListener('click', function (event) {
            const threeDotButton = document.querySelector('.three-dot-btn');
            // Check if the click is outside the popup and the three-dot button
            if (!moreActions.contains(event.target) && event.target !== threeDotButton) {
                moreActions.style.display = 'none';
            }
        });

        // Handle responsive design
        window.addEventListener('resize', function () {
            moveButtonsToPopup(); // Update button positions based on screen size
        });

        // Initial check for the screen size on page load
        moveButtonsToPopup(); // Move buttons based on the initial screen size
    </script>
</footer>
<poups>
<div class="popup" id="popup">
    <span class="close-btn" onclick="closePopup()">✖</span>
    <h2>Nested Table</h2>
    <table>
        <thead>

            <tr>
                <th><input type="checkbox"></th>
                <th>Category</th>
                <th>Sub Category</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody id="nested-table-body">
            <tr>
                <td>Nested Row 1, Cell 1</td>
                <td>Nested Row 1, Cell 2</td>
            </tr>
        
        </tbody>
    </table>
</div>
<div class="wfsidebar" id="wfsidebar">
    <button class='wf-closebtn' onclick="closeWf()">X</button>
    
        <div class="wfsidebar-header">
            <h2>Workflow</h2>
             <button class="button approve" value="Approve">Approve</button>
    <button class="button reject"  value="Reject">Reject</button>
        </div>
        <div class="workflowLog" id="workflowLog">
            <!-- Workflow steps will be inserted here dynamically -->
        </div>
</div>
<div class="dialog-container">
    <div class="modal_container">
        <div class="modal_heading">
            <h4>Download Data</h4>
        </div>
        <div class="body">
            <p>Download as Excel file?</p>
            <!-- <img alt="Excel Icon" width="30" src=""> -->
        </div>
        <div class="footer">
            <button class="footer_btn_primary">Download</button>
            <button class="close-Excel-pop" onclick="closeExcelpopup()">Close</button>
        </div>
    </div>
</div>
</poups>

<script>
  function openExcelpopup(){
console.log('downloadExcel called')
let input=  document.querySelector('.dialog-container')
console.log('input',input)
input.style.display='flex';

console.log(input.display)
}
function closeExcelpopup(){
console.log('downloadExcel called')
let input=  document.querySelector('.dialog-container')
console.log('input',input)
input.style.display='none';

console.log(input.display)
}
   function toggleTable(input) {
            console.log('toogle called',input,input.innerText);
            console.log('parent',input.parentElement.parentElement.nextElementSibling)
            let value=input.innerText
            let collapse=input.parentElement.parentElement.nextElementSibling
            input.innerText=value=='+'?'-':'+';
            const table = document.querySelector('.collpase-container');
            // table.style.display = (table.style.display === 'none') ? '' : 'none';
            collapse.style.display = (collapse.style.display === 'none') ? '' : 'none';

            console.log(table.style.display)

        }
    enableSubmenus()
    function fetchApprovalLevels() {
            // Example data, replace this with a real API call
            return [
                { id: 'START', user: 'L1 [L1 ID]', status: 'Inbound Shipment', timestamp: '10/16/24, 11:09 AM', class: 'start' },
                { id: 'SK', user: 'L2 [L2 ID]', status: 'Submitted', timestamp: '10/16/24, 11:09 AM', class: 'submitted' },
                { id: 'SD', user: 'L3 [L3 ID]', status: 'Approved', timestamp: '10/16/24, 11:09 AM', class: 'approved' },
                { id: 'SD', user: 'L4 [L4 ID]', status: 'Approved', timestamp: '10/16/24, 11:09 AM', class: 'approved' },
                { id: 'END', user: 'SYSTEM [SYSTEM]', status: 'Completion', timestamp: '10/16/24, 11:09 AM', class: 'end' }
            ];
        }
    async function renderWorkflowSteps(steps,id) {
            const workflowLog = document.getElementById('workflowLog');
workflowLog.innerHTML = ''; // Clear existing content
 steps.forEach(step => {
                const stepDiv = document.createElement('div');
                stepDiv.className = 'workflow-step';
                
                const stepHeader = document.createElement('div');
                stepHeader.className = 'step-header';
                stepHeader.innerHTML = `
                    <div class="step-icon ${step.class}">${step.id}</div>
                    <div class="step-info">
                        <h4>${step.user}</h4>
                        <p>Status: ${step.status}</p>
                        <span>${step.timestamp}</span>
                    </div>
                `;

                const stepDetails = document.createElement('div');
                stepDetails.className = 'step-details';
                stepDetails.innerHTML = 'Additional step details can be provided here.';
                
                stepDiv.appendChild(stepHeader);
                stepDiv.appendChild(stepDetails);
           
                workflowLog.appendChild(stepDiv);
            }); 




        }
        // Initialize workflow log
        function getlog(id) {
            const approvalLevels = fetchApprovalLevels(); // Fetch levels
           
           console.log('workflow for',id)

            let test = document.getElementById('wfsidebar')
            test.style.display = (test.style.display === 'none') ? 'grid' : 'none';
            renderWorkflowSteps(approvalLevels,id); // Render levels
        };
        function closeWf(){
            let test = document.getElementById('wfsidebar')
            test.style.display =  'none';
        }
    
    
 </script>

<script>
    let currentSort = { column: null, order: 'asc' }; // Tracks current sorting state

function sortTable(header) {
    const columnKey = header.getAttribute('data-column');
    const tableBody = document.getElementById('materials');
    const rows = Array.from(tableBody.rows);

    // Toggle sort order or reset if switching columns
    if (currentSort.column === columnKey) {
        currentSort.order = currentSort.order === 'asc' ? 'desc' : 'asc';
    } else {
        currentSort.column = columnKey;
        currentSort.order = 'asc';
    }

    const columnIndex = Array.from(header.parentNode.children).indexOf(header);

    rows.sort((rowA, rowB) => {
        const cellA = rowA.cells[columnIndex].innerText.trim();
        const cellB = rowB.cells[columnIndex].innerText.trim();

        if (!isNaN(cellA) && !isNaN(cellB)) {
            // Numeric sort
            return currentSort.order === 'asc' ? cellA - cellB : cellB - cellA;
        } else {
            // String sort
            return currentSort.order === 'asc'
                ? cellA.localeCompare(cellB)
                : cellB.localeCompare(cellA);
        }
    });

    // Re-render sorted rows
    rows.forEach(row => tableBody.appendChild(row));

    // Update sorting icon dynamically
    updateSortIcons(header);
}

function updateSortIcons(header) {
    // // Clear all sorting icons
    // document.querySelectorAll('.sort-icon').forEach(icon => {
    //     icon.textContent = '⬍';
    // });

    // // Update the sorting icon on the active column
    // const sortIcon = header.querySelector('.sort-icon');
    // sortIcon.textContent = currentSort.order === 'asc' ? '⬆️' : '⬇️';

// Reset all sorting icons
document.querySelectorAll('.fa-sort-up, .fa-sort-down, .fa-sort').forEach(icon => {
        icon.classList.remove('fa-sort-up', 'fa-sort-down');
        icon.classList.add('fa-sort');
    });

    // Update the sorting icon on the active column
    const sortIcon = header.querySelector('.fa');
    if (currentSort.order === 'asc') {
        sortIcon.classList.remove('fa-sort');
        sortIcon.classList.add('fa-sort-up');
    } else {
        sortIcon.classList.remove('fa-sort');
        sortIcon.classList.add('fa-sort-down');
    }
}

</script>

<div class="filter-popup" id="filter-popup">

    <button class="close-filter" onclick="closeFilter()">X</button>
<div class="filter-content-left" id="filter-content-left"><p>left part</p></div>
<div class="filter-content-right" id="filter-content-right"><p>right part</p></div>

</div>

</body>

</html>
<script>
     document.addEventListener("DOMContentLoaded", function () {
        const table = document.getElementById("customers");
        const headers = Array.from(table.querySelectorAll("th")).map(th => th.textContent.trim());

        table.querySelectorAll("tr").forEach(row => {
            row.querySelectorAll("td").forEach((td, index) => {
                td.setAttribute("data-label", headers[index]);
            });
        });
    });
    const tableBody = document.getElementById("materials");



</script>

<script>
    let sortfield='vendorId';
    let  sortOrder=-1;
    document.addEventListener('DOMContentLoaded', function () {
         const rowsPerPageSelect = document.getElementById('rowsPerPage');
         let currentPage = 1;
         let rowsPerPage = parseInt(rowsPerPageSelect.value, 10);

         // Function to load data from the server
         function loadPage(page, rowsPerPage) {
             fetch(`/fetchPageData2?page=${page}&limit=${rowsPerPage}&sortfield=${sortfield}&sortOrder=${sortOrder}`)
                 .then(response => response.json())
                 .then(data => {
                     renderTable(data);
                     setupPaginationControls(data.totalPages, data.currentPage);
                 })
                 .catch(error => console.error('Error loading data:', error));
         }

         // Function to render table rows
         function renderTable(data) {
             const table = document.querySelector('tbody');
             table.innerHTML = `
        
         ${data.items[0].paginatedResults.map(item => `
             <tr>    
                
<td><a class="styled-link"href='/views/supplierDetails.hmtl?mediID=${item.vendorId}'>${item.vendorId}</a></td>
                                <td><a href='/workflowlog?id=${item.vendorId}'>inbox</a></td>

             <td  class="supplierName">${item.supplierName}</td>
               <td  class="phone">${item.phone}</td>
                 <td  class="email">${item.email}</td>
                   <td  class="regDate">${item.regDate}</td>
                    <td  class="status ${item.status}">${item.status}</td>
                <td><a href='/getMedicine?mediID=${item.vendorId}}'><i class="fa fa-edit"></i></a></td>
                <td><i class="fa fa-trash" style="color:red;" onclick="return confirmDelete('${item.vendorId}}')"></i></td>
                 <td>
                    <div class="icon-container" onclick="openPopup()">
                        
                        <i class="fa fa-table" id="item-count"><span class="badge">${5}</span></i>
                    </div>
                </td>
                 <td>
      <div class="collaboration-icons">
        <i class="fa-regular fa-comment"></i>   
        <i class="fa-regular fa-file"></i>      
      </div>
    </td>
                </tr>
         `).join('')}
     `;
         }

         // Function to setup pagination controls
         function setupPaginationControls(totalPages, currentPage) {
             const paginationContainer = document.querySelector('#pagination');
             let paginationHtml = '';

             if (totalPages > 1) {
                 if (currentPage > 1) {
                     paginationHtml += `<button onclick="changePage(${currentPage - 1})">Previous</button>`;
                 }

                 for (let i = 1; i <= totalPages; i++) {
                     paginationHtml += `<button onclick="changePage(${i})" ${i === currentPage ? 'class="active"' : ''}>${i}</button>`;
                 }

                 if (currentPage < totalPages) {
                     paginationHtml += `<button onclick="changePage(${currentPage + 1})">Next</button>`;
                 }
             }

             paginationContainer.innerHTML = paginationHtml;
         }

         // Function to handle page changes
         window.changePage = function (page) {
             currentPage = page;
             loadPage(currentPage, rowsPerPage);
         };

         // Function to handle rows per page change
         rowsPerPageSelect.addEventListener('change', function () {
             rowsPerPage = parseInt(this.value, 10);
             loadPage(1, rowsPerPage);
         });

         // Initial load
         loadPage(currentPage, rowsPerPage);
     });



     // Load page and render table as before...
     // Your existing table rendering and pagination code...
// popup.js
function showPopup(message, title = "Notification") {
 const popup = document.createElement('div');
 popup.className = 'popup';
 let type='success'
const icon = type === "success" ? "&#10004;" : "&#10060;"; 
 const popupContent = `
     <div class="popup-inner">
         <h2>${title}</h2>
           <p class="popup-icon">${icon}</p>
         <p>${message}</p>
         <button onclick="closePopup()">Close</button>
     </div>
 `;

 popup.innerHTML = popupContent;
 document.body.appendChild(popup);

 // Close the popup when clicking outside of it
 popup.addEventListener('click', function(e) {
     if (e.target === popup) {
         closePopup();
     }
 });

 // Optional: Automatically close after a few seconds
 setTimeout(closePopup, 5000);
}

function closePopup() {
 const popup = document.querySelector('.popup');
 if (popup) {
     document.body.removeChild(popup);
 }
}


</script>  
<script>
     function fetchPopupData() {
         const popupTableBody = document.querySelector('#popup tbody');
   
         try {
        //    const response = await fetch('https://api.example.com/categories'); // Replace with your API endpoint
           const data = [
  {
    "id": "1",
    "category": "Category A",
    "subCategory": "Sub A1",
    "description": "Description for A1"
  },
  {
    "id": "2",
    "category": "Category B",
    "subCategory": "Sub B1",
    "description": "Description for B1"
  }
]

   
           // Clear the table body before inserting new rows
           popupTableBody.innerHTML = '';
   
           // Dynamically create table rows based on API data
           data.forEach(item => {
             const row = document.createElement('tr');
             row.innerHTML = `
               <td><input type="checkbox" value="${item.id}"></td>
               <td>${item.category}</td>
               <td>${item.subCategory}</td>
               <td>${item.description}</td>
             `;
             popupTableBody.appendChild(row);
           });
         } catch (error) {
           console.error('Error fetching popup data:', error);
           popupTableBody.innerHTML = '<tr><td colspan="4">Failed to load data</td></tr>';
         }
       }
  
     // Function to open the popup
 function openPopup() {
    fetchPopupData();

    document.getElementById('popup').style.display = 'block';
    document.getElementById('overlay').style.display = 'block';

}
 
       // Call the function to fetch and populate data when the page loads
// Function to close the popup
function closePopup() {
    document.getElementById('popup').style.display = 'none';
    document.getElementById('overlay').style.display = 'none';
}

// Example: Updating the item count dynamically (could be based on your application logic)
document.querySelectorAll('.icon-container').forEach((icon, index) => {
    // Get the nested table rows count (this is a placeholder logic for demo purposes)
    const itemCount = index === 0 ? 4 : 2; // Replace with the actual count logic

    // Update the badge text
    icon.querySelector('.badge').textContent = itemCount;
});
</script>
<script>


   
    const filterColumns = [
    { columnName: 'Supplier ID', techname:"vendorId",filterType: 'checkbox' },

   { columnName: 'Medicine', techname:"medicineId",filterType: 'checkbox' },
   { columnName: 'Quantity', techname:"quantity",filterType: 'number' },
   { columnName: 'Expiry Date',techname:"expiry",filterType: 'dateRange' },
];
let selectedFilters={}
function openFilter() {
   const filterPopup = document.getElementById('filter-popup');
   const filterContentLeft = document.getElementById('filter-content-left');
   const filterContentRight = document.getElementById('filter-content-right');

   // Clear previous content
   filterContentLeft.innerHTML = '';
   filterContentRight.innerHTML = '<p>Select a column on the left to see filter options.</p>';

   // Get table headers
   const table = document.getElementById('customers');
   const headers = table.querySelectorAll('th');

   // Create filter options only for columns in filterColumns
   headers.forEach((header, index) => {
       const columnName = header.innerText.trim();
       const filterColumn = filterColumns.find(filterCol => filterCol.columnName === columnName);

       if (filterColumn) {
           const filterOption = document.createElement('div');
           filterOption.innerText = columnName;
           filterOption.style.cursor = 'pointer';
           filterOption.onclick = () => populateFilterValues(index, filterColumn.filterType,filterColumn);

           filterContentLeft.appendChild(filterOption);
       }
   });

   filterPopup.style.display = 'flex'; // Show the filter popup
}

function populateFilterValues(columnIndex,filterType,filterColumn) {
   const filterContentRight = document.getElementById('filter-content-right');
   filterContentRight.innerHTML = ''; // Clear previous values
   const techname = filterColumn.techname;
 
   
      if (filterType === 'checkbox') {
       // Search bar for checkbox filter
       const searchInput = document.createElement('input');
       searchInput.type = 'text';
       searchInput.placeholder = 'Search...';
       searchInput.id = 'filter-search';
       searchInput.oninput = filterCheckboxes; // Call filter function on input

       filterContentRight.appendChild(searchInput);

       // Checkbox filter for categorical data
       const table = document.getElementById('customers');
       const rows = table.querySelectorAll('tr');
       const uniqueValues = new Set();

       rows.forEach((row, rowIndex) => {
           if (rowIndex !== 0) { // Skip header row
               const cell = row.cells[columnIndex];
               if (cell) {
                   uniqueValues.add(cell.innerText);
               }
           }
       });

       const checkboxContainer = document.createElement('div');
       checkboxContainer.id = 'checkbox-container'; // Container to hold all checkboxes

       uniqueValues.forEach(value => {
           const checkbox = document.createElement('input');
           checkbox.type = 'checkbox';
           checkbox.value = value;
           checkbox.id = `filter-${value}`;
           checkbox.onchange = () => applyFilters(filterColumn,columnIndex);

           const label = document.createElement('label');
           label.htmlFor = `filter-${value}`;
           label.innerText = value;

           const div = document.createElement('div');
           div.classList.add('checkbox-item');
           div.appendChild(checkbox);
           div.appendChild(label);

           checkboxContainer.appendChild(div);
       });

       filterContentRight.appendChild(checkboxContainer);
   } 
   else if (filterType === 'number') {
       // Number range filter
       const minInput = document.createElement('input');
       minInput.type = 'number';
       minInput.placeholder = 'Min';
       minInput.id = `filter-${techname}-min`;
       
       const maxInput = document.createElement('input');
       maxInput.type = 'number';
       maxInput.placeholder = 'Max';
       maxInput.id = `filter-${techname}-max`;

       const applyButton = document.createElement('button');
       applyButton.innerText = 'Apply';
       applyButton.onclick = () => applyFilters(filterColumn);

       filterContentRight.appendChild(minInput);
       filterContentRight.appendChild(maxInput);
       filterContentRight.appendChild(applyButton);
   } 
   
   else if (filterType === 'dateRange') {
       // Date range filter
       const startDate = document.createElement('input');
       startDate.type = 'date';
       startDate.id = `filter-${techname}-start-date`;

       const endDate = document.createElement('input');
       endDate.type = 'date';
       endDate.id = `filter-${techname}-end-date`;

       const applyButton = document.createElement('button');
       applyButton.innerText = 'Apply';
       applyButton.onclick = () => applyFilters(filterColumn,columnIndex);

       filterContentRight.appendChild(startDate);
       filterContentRight.appendChild(endDate);
       filterContentRight.appendChild(applyButton);
   }

   document.getElementById('filter-popup').style.display = 'flex';

 
}
 function filterCheckboxes() {
   const searchQuery = document.getElementById('filter-search').value.toLowerCase();
   const checkboxes = document.querySelectorAll('#checkbox-container .checkbox-item');

   checkboxes.forEach(item => {
       const label = item.querySelector('label').innerText.toLowerCase();
       if (label.includes(searchQuery)) {
           item.style.display = ''; // Show if it matches search
       } else {
           item.style.display = 'none'; // Hide if it doesn't match
       }
   })};
function applyFilters2(columnIndex) {
   const table = document.getElementById('customers');
   const checkboxes = document.querySelectorAll('#filter-content-right input[type="checkbox"]');
   const selectedValues = Array.from(checkboxes)
       .filter(checkbox => checkbox.checked)
       .map(checkbox => checkbox.value);

   const filterValues = [];

  checkboxes.forEach(checkbox => {
           if (checkbox.checked) {
               filterValues.push(checkbox.value);
           }
       });
       
   const rows = table.querySelectorAll('tr');
   rows.forEach((row, rowIndex) => {
       if (rowIndex !== 0) {
           const cell = row.cells[columnIndex];
           if (cell && selectedValues.includes(cell.innerText)) {
               row.style.display = '';
           } else {
               row.style.display = 'none';
           }
       }
   });
       const filterType = filterColumns[columnIndex].filterType;

 
const filterKey = `filter-${columnIndex}`;
   localStorage.setItem(filterKey, JSON.stringify({ columnIndex, filterType, filterValues }));
   
   
}

function applyNumberFilter(columnIndex) {
   const min = parseFloat(document.getElementById('filter-min').value) || -Infinity;
   const max = parseFloat(document.getElementById('filter-max').value) || Infinity;
   const table = document.getElementById('customers');
   const rows = table.querySelectorAll('tr');

   rows.forEach((row, rowIndex) => {
       if (rowIndex !== 0) {
           const cellValue = parseFloat(row.cells[columnIndex].innerText);
           if (cellValue >= min && cellValue <= max) {
               row.style.display = '';
           } else {
               row.style.display = 'none';
           }
       }
   });
   closeFilter();
}

function applyDateFilter(columnIndex) {
   const startDate = new Date(document.getElementById('filter-start-date').value);
   const endDate = new Date(document.getElementById('filter-end-date').value);
   const table = document.getElementById('customers');
   const rows = table.querySelectorAll('tr');

   rows.forEach((row, rowIndex) => {
       if (rowIndex !== 0) {
           const cellDate = new Date(row.cells[columnIndex].innerText);
           if (cellDate >= startDate && cellDate <= endDate) {
               row.style.display = '';
           } else {
               row.style.display = 'none';
           }
       }
   });
   closeFilter();
}

function closeFilter() {
   document.getElementById('filter-popup').style.display = 'none';
}

function applyFilters(filterColumn,columnIndex) {
   const filterType = filterColumn.filterType;
   const techname = filterColumn.techname;
console.log(filterColumn,'filterType',filterType)
   if (filterType === 'checkbox') {
        const table = document.getElementById('customers');
   const checkboxes = document.querySelectorAll('#filter-content-right input[type="checkbox"]');
   const selectedValues = Array.from(checkboxes)
       .filter(checkbox => checkbox.checked)
       .map(checkbox => checkbox.value);

   const filterValues = [];

  checkboxes.forEach(checkbox => {
           if (checkbox.checked) {
               filterValues.push(checkbox.value);
           }
       });
       
   const rows = table.querySelectorAll('tr');
   rows.forEach((row, rowIndex) => {
       if (rowIndex !== 0) {
           const cell = row.cells[columnIndex];
           if (cell && selectedValues.includes(cell.innerText)) {
               row.style.display = '';
           } else {
               row.style.display = 'none';
           }
       }
   });
       const filterType = filterColumns[columnIndex].filterType;

 
const filterKey = `filter-${columnIndex}`;
   localStorage.setItem(filterKey, JSON.stringify({ columnIndex, filterType, filterValues }));
   
       const checkedValues = Array.from(document.querySelectorAll(`#checkbox-container input:checked`)).map(checkbox => checkbox.value);
       if (checkedValues.length) {
           selectedFilters[techname] = { $in: checkedValues };
       } else {
           delete selectedFilters[techname];
       }
   } 
   
   else if (filterType === 'number') {
       const min = document.getElementById(`filter-${techname}-min`).value;
       const max = document.getElementById(`filter-${techname}-max`).value;
       if (min || max) {
           selectedFilters[techname] = {};
           if (min) selectedFilters[techname].$gte = min;
           if (max) selectedFilters[techname].$lte = max;
       } else {
           delete selectedFilters[techname];
       }
   } 
   else if (filterType === 'dateRange') {
       const startDate = document.getElementById(`filter-${techname}-start-date`).value;
       const endDate = document.getElementById(`filter-${techname}-end-date`).value;
       
       if (startDate || endDate) {
           selectedFilters[techname] = {};
           if (startDate) selectedFilters[techname].$gte = startDate;
           if (endDate) selectedFilters[techname].$lte = endDate;
       } else {
           delete selectedFilters[techname];
       }
   }

   // Now you can use the selectedFilters object to build your query
   console.log('Selected Filters:', selectedFilters);
   sendQueryToServer();
}

// Send query to the server
function sendQueryToServer() {
   const query = { "$and": [] };
   
   Object.keys(selectedFilters).forEach(field => {
       const filter = {};
       filter[field] = selectedFilters[field];
       query["$and"].push(filter);
   });

   console.log('Prepared query for server:', query);
}
</script>
  <script>
    document.querySelector('.footer_btn_primary').addEventListener('click',function(){
            console.log('excel download function')
             const columnsToDownload = ["contact"]; // Example: Medicine, Medicine Name, Price, Quantity
downloadPartialExcel(columnsToDownload)
// downloadExcel()
        })
  </script>